{"ast":null,"code":"// // import React, { useState, useEffect } from 'react';\n// // import \"./Exam.css\";\n// // import { getQuestions, submitExam, getResult } from './api';\n\n// // function Exam({ token }) {\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState([]);\n// //   const [current, setCurrent] = useState(0);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [result, setResult] = useState(null);\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n// //   // Utility: Shuffle array\n// //   const shuffleArray = (arr) => {\n// //     let newArr = [...arr];\n// //     for (let i = newArr.length - 1; i > 0; i--) {\n// //       const j = Math.floor(Math.random() * (i + 1));\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n// //     }\n// //     return newArr;\n// //   };\n\n// //   // Load exam state or fetch new questions\n// //   useEffect(() => {\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n// //     getResult(token)\n// //       .then(r => {\n// //         if (r.data && r.data.review) {\n// //           // Already submitted\n// //           setSubmitted(true);\n// //           setResult(r.data);\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           // Resume ongoing exam\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           // Start new exam with shuffled questions\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       })\n// //       .catch(() => {\n// //         // Offline or API error â€” fallback to stored state\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       });\n// //   }, [token]);\n\n// //   // Save progress\n// //   useEffect(() => {\n// //     if (questions.length && !submitted) {\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n// //       localStorage.setItem(\"exam_current\", current);\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n// //     }\n// //   }, [questions, answers, current, timeLeft, submitted]);\n\n// //   // Countdown timer\n// //   useEffect(() => {\n// //     if (!questions.length || submitted) return;\n// //     if (timeLeft <= 0) {\n// //       handleSubmit();\n// //       return;\n// //     }\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n// //     return () => clearTimeout(timer);\n// //   }, [questions.length, submitted, timeLeft]);\n\n// //   const handleOption = (idx) => {\n// //     const newAnswers = [...answers];\n// //     newAnswers[current] = idx;\n// //     setAnswers(newAnswers);\n// //   };\n\n// //   const handleSubmit = () => {\n// //     if (submitted) return;\n\n// //     const payload = questions.map((q, i) => ({\n// //       questionId: q._id,\n// //       selectedOption: answers[i]\n// //     }));\n\n// //     submitExam(payload, token).then(() => {\n// //       setSubmitted(true);\n// //       // Clear saved progress\n// //       localStorage.removeItem(\"exam_questions\");\n// //       localStorage.removeItem(\"exam_answers\");\n// //       localStorage.removeItem(\"exam_current\");\n// //       localStorage.removeItem(\"exam_timeLeft\");\n\n// //       getResult(token).then(r => {\n// //         setResult(r.data);\n// //         window.location.hash = '#/results';\n// //       });\n// //     });\n// //   };\n\n// //   if (!questions.length && !submitted) {\n// //     return (\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n// //         <h2>Loading questions...</h2>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (submitted && result) {\n// //     return (\n// //       <div className=\"result-container card\">\n// //         <h2>Exam Submitted</h2>\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\n// //         </div>\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n// //       </div>\n// //     );\n// //   }\n\n// //   const q = questions[current];\n// //   const minutes = Math.floor(timeLeft / 60);\n// //   const seconds = timeLeft % 60;\n\n// //   return (\n// //     <div className=\"exam-container\">\n// //       <div\n// //         className=\"exam-timer\"\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n// //       >\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n// //       </div>\n\n// //       <h3>Question {current + 1} of {questions.length}</h3>\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\n// //         {q.options.map((opt, idx) => (\n// //           <li\n// //             key={idx}\n// //             style={{\n// //               padding: '8px 12px',\n// //               margin: '6px 0',\n// //               border: '2px solid',\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n// //               borderRadius: 6,\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n// //               cursor: 'pointer',\n// //               fontWeight: answers[current] === idx ? 600 : 400\n// //             }}\n// //             onClick={() => handleOption(idx)}\n// //           >\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n// //               {String.fromCharCode(65 + idx)}.\n// //             </span>\n// //             {opt}\n// //           </li>\n// //         ))}\n// //       </ul>\n\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n// //         <button onClick={handleSubmit}>Submit Exam</button>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./Exam.css\";\n// import { getQuestions, submitExam, getResult } from './api';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n//   const shuffleArray = (arr) => {\n//     let newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load questions on start\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//       // Resume ongoing exam\n//       setQuestions(JSON.parse(storedQuestions));\n//       setAnswers(JSON.parse(storedAnswers));\n//       setCurrent(parseInt(storedCurrent, 10));\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\n//     } else {\n//       // Fetch new questions\n//       getQuestions(token).then(res => {\n//         const shuffled = shuffleArray(res.data);\n//         setQuestions(shuffled);\n//         setAnswers(Array(shuffled.length).fill(null));\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//       });\n//     }\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id,\n//       selectedOption: answers[i]\n//     }));\n\n//     submitExam(payload, token).then(() => {\n//       setSubmitted(true);\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       // Fetch final result\n//       getResult(token).then(r => {\n//         setResult(r.data);\n//         window.location.hash = '#/results';\n//       });\n//     });\n//   };\n\n//   if (!questions.length && !submitted) {\n//     return (\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n//         <h2>Loading questions...</h2>\n//       </div>\n//     );\n//   }\n\n//   if (submitted && result) {\n//     return (\n//       <div className=\"result-container card\">\n//         <h2>Exam Submitted</h2>\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n//           <strong>Score:</strong> {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//       </div>\n//     );\n//   }\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div\n//         className=\"exam-timer\"\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n//       >\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n//       </div>\n\n//       <h3>Question {current + 1} of {questions.length}</h3>\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             style={{\n//               padding: '8px 12px',\n//               margin: '6px 0',\n//               border: '2px solid',\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n//               cursor: 'pointer',\n//               fontWeight: answers[current] === idx ? 600 : 400\n//             }}\n//             onClick={() => handleOption(idx)}\n//           >\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n//               {String.fromCharCode(65 + idx)}.\n//             </span>\n//             {opt}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./Exam.css\";\n// import { getQuestions, submitExam, getResult } from './api';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n//   // Shuffle questions\n//   const shuffleArray = (arr) => {\n//     const newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load questions or resume\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     getResult(token)\n//       .then(res => {\n//         if (res.data && res.data.review) {\n//           setSubmitted(true);\n//           setResult(res.data);\n//         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//           setQuestions(JSON.parse(storedQuestions));\n//           setAnswers(JSON.parse(storedAnswers));\n//           setCurrent(parseInt(storedCurrent, 10));\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\n//         } else {\n//           getQuestions(token).then(res => {\n//             const shuffled = shuffleArray(res.data);\n//             setQuestions(shuffled);\n//             setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\n//             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//           }).catch(err => console.error(\"Error fetching questions:\", err));\n//         }\n//       })\n//       .catch(err => {\n//         // fallback\n//         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//           setQuestions(JSON.parse(storedQuestions));\n//           setAnswers(JSON.parse(storedAnswers));\n//           setCurrent(parseInt(storedCurrent, 10));\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\n//         }\n//       });\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Countdown\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id || q.id,\n//       selectedOption: answers[i] // can be undefined\n//     }));\n\n//     console.log(\"Submitting payload:\", payload); // debug\n\n//     submitExam(payload, token)\n//       .then(() => {\n//         setSubmitted(true);\n//         localStorage.removeItem(\"exam_questions\");\n//         localStorage.removeItem(\"exam_answers\");\n//         localStorage.removeItem(\"exam_current\");\n//         localStorage.removeItem(\"exam_timeLeft\");\n\n//         getResult(token).then(r => {\n//           setResult(r.data);\n//           window.location.hash = '#/results';\n//         });\n//       })\n//       .catch(err => {\n//         console.error(\"Error submitting exam:\", err.response?.data || err.message);\n//         alert(\"Error submitting exam. Please try again.\");\n//       });\n//   };\n\n//   if (!questions.length && !submitted) {\n//     return <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>Loading questions...</div>;\n//   }\n\n//   if (submitted && result) {\n//     return (\n//       <div className=\"result-container card\">\n//         <h2>Exam Submitted</h2>\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n//           <strong>Score:</strong> {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//       </div>\n//     );\n//   }\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div className=\"exam-timer\" style={{ textAlign: 'right', fontWeight: 600, color: '#d32f2f', marginBottom: 16, fontSize: '1.3em' }}>\n//         Time Left: {minutes.toString().padStart(2,'0')}:{seconds.toString().padStart(2,'0')}\n//       </div>\n\n//       <h3>Question {current + 1} of {questions.length}</h3>\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li key={idx} style={{\n//             padding: '8px 12px',\n//             margin: '6px 0',\n//             border: '2px solid',\n//             borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n//             borderRadius: 6,\n//             backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n//             cursor: 'pointer',\n//             fontWeight: answers[current] === idx ? 600 : 400\n//           }}\n//           onClick={() => handleOption(idx)}>\n//             <span style={{ fontWeight:'bold', marginRight:6 }}>{String.fromCharCode(65+idx)}.</span>\n//             {opt}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div style={{ display:'flex', gap:'16px', marginTop:'18px' }}>\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import { getQuestions, submitExam, getResult } from './api';\n// import './Exam.css';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n//   useEffect(() => {\n//     getQuestions(token).then(res => {\n//       setQuestions(res.data);\n//       setAnswers(Array(res.data.length).fill(null));\n//     }).catch(err => console.error(err));\n//   }, [token]);\n\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft, questions, submitted]);\n\n//   const handleOption = idx => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n//     const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\n//     submitExam(payload, token)\n//       .then(() => getResult(token))\n//       .then(r => {\n//         setSubmitted(true);\n//         setResult(r.data);\n//         window.location.hash = '#/results';\n//       })\n//       .catch(err => alert('Error submitting exam. Please try again.'));\n//   };\n\n//   if (!questions.length) return <div>Loading questions...</div>;\n\n//   if (submitted && result) return (\n//     <div>\n//       <h2>Exam Submitted</h2>\n//       <div>Score: {result.score} / {result.review.length}</div>\n//       <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//     </div>\n//   );\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div>Time Left: {minutes}:{seconds.toString().padStart(2,'0')}</div>\n//       <h3>Question {current+1} of {questions.length}</h3>\n//       <div>{q.question}</div>\n//       <ul>\n//         {q.options.map((opt, i) => (\n//           <li key={i} onClick={() => handleOption(i)} style={{ fontWeight: answers[current] === i ? 'bold' : 'normal' }}>\n//             {String.fromCharCode(65+i)}. {opt}\n//           </li>\n//         ))}\n//       </ul>\n//       <div>\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";   // âœ… Add this line\n// import { getQuestions, submitExam, getResult } from \"./api\";\n// import \"./Exam.css\";\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n//   const shuffleArray = (arr) => {\n//     let newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load state or fetch\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//       setQuestions(JSON.parse(storedQuestions));\n//       setAnswers(JSON.parse(storedAnswers));\n//       setCurrent(parseInt(storedCurrent, 10));\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\n//     } else {\n//       getQuestions(token).then((res) => {\n//         const shuffled = shuffleArray(res.data);\n//         setQuestions(shuffled);\n//         setAnswers(Array(shuffled.length).fill(null));\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//         localStorage.setItem(\"exam_answers\", JSON.stringify(Array(shuffled.length).fill(null)));\n//         localStorage.setItem(\"exam_current\", 0);\n//         localStorage.setItem(\"exam_timeLeft\", 30 * 60);\n//       });\n//     }\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => {\n//       setTimeLeft((t) => {\n//         localStorage.setItem(\"exam_timeLeft\", t - 1);\n//         return t - 1;\n//       });\n//     }, 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n//     const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\n\n//     submitExam(payload, token)\n//       .then(() => {\n//         setSubmitted(true);\n//         localStorage.removeItem(\"exam_questions\");\n//         localStorage.removeItem(\"exam_answers\");\n//         localStorage.removeItem(\"exam_current\");\n//         localStorage.removeItem(\"exam_timeLeft\");\n\n//         getResult(token).then((r) => {\n//           setResult(r.data);\n//           window.location.hash = \"#/results\";\n//         });\n//       })\n//       .catch(() => alert(\"Error submitting exam. Please try again.\"));\n//   };\n\n//   if (!questions.length && !submitted) return <div className=\"exam-container\">Loading questions...</div>;\n//   if (submitted && result)\n//     return (\n//       <div className=\"exam-container\">\n//         <h2>Exam Submitted</h2>\n//         <div>\n//           Score: {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\n//       </div>\n//     );\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\n//       </div>\n//       <h3>\n//         Question {current + 1} of {questions.length}\n//       </h3>\n//       <div>{q.question}</div>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             onClick={() => handleOption(idx)}\n//             style={{\n//               padding: \"8px\",\n//               margin: \"6px 0\",\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             {String.fromCharCode(65 + idx)}. {opt}\n//           </li>\n//         ))}\n//       </ul>\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\n//         <button disabled={current === 0} onClick={() => setCurrent((c) => c - 1)}>\n//           Previous\n//         </button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent((c) => c + 1)}>\n//           Next\n//         </button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;","map":{"version":3,"names":[],"sources":["C:/Users/Sridh/Desktop/new-exam-builder-ace-main/frontend/src/Exam.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import \"./Exam.css\";\r\n// // import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// // function Exam({ token }) {\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState([]);\r\n// //   const [current, setCurrent] = useState(0);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [result, setResult] = useState(null);\r\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n// //   // Utility: Shuffle array\r\n// //   const shuffleArray = (arr) => {\r\n// //     let newArr = [...arr];\r\n// //     for (let i = newArr.length - 1; i > 0; i--) {\r\n// //       const j = Math.floor(Math.random() * (i + 1));\r\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n// //     }\r\n// //     return newArr;\r\n// //   };\r\n\r\n// //   // Load exam state or fetch new questions\r\n// //   useEffect(() => {\r\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n// //     getResult(token)\r\n// //       .then(r => {\r\n// //         if (r.data && r.data.review) {\r\n// //           // Already submitted\r\n// //           setSubmitted(true);\r\n// //           setResult(r.data);\r\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           // Resume ongoing exam\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           // Start new exam with shuffled questions\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       })\r\n// //       .catch(() => {\r\n// //         // Offline or API error â€” fallback to stored state\r\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       });\r\n// //   }, [token]);\r\n\r\n// //   // Save progress\r\n// //   useEffect(() => {\r\n// //     if (questions.length && !submitted) {\r\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n// //       localStorage.setItem(\"exam_current\", current);\r\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n// //     }\r\n// //   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n// //   // Countdown timer\r\n// //   useEffect(() => {\r\n// //     if (!questions.length || submitted) return;\r\n// //     if (timeLeft <= 0) {\r\n// //       handleSubmit();\r\n// //       return;\r\n// //     }\r\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n// //     return () => clearTimeout(timer);\r\n// //   }, [questions.length, submitted, timeLeft]);\r\n\r\n// //   const handleOption = (idx) => {\r\n// //     const newAnswers = [...answers];\r\n// //     newAnswers[current] = idx;\r\n// //     setAnswers(newAnswers);\r\n// //   };\r\n\r\n// //   const handleSubmit = () => {\r\n// //     if (submitted) return;\r\n\r\n// //     const payload = questions.map((q, i) => ({\r\n// //       questionId: q._id,\r\n// //       selectedOption: answers[i]\r\n// //     }));\r\n\r\n// //     submitExam(payload, token).then(() => {\r\n// //       setSubmitted(true);\r\n// //       // Clear saved progress\r\n// //       localStorage.removeItem(\"exam_questions\");\r\n// //       localStorage.removeItem(\"exam_answers\");\r\n// //       localStorage.removeItem(\"exam_current\");\r\n// //       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n// //       getResult(token).then(r => {\r\n// //         setResult(r.data);\r\n// //         window.location.hash = '#/results';\r\n// //       });\r\n// //     });\r\n// //   };\r\n\r\n// //   if (!questions.length && !submitted) {\r\n// //     return (\r\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n// //         <h2>Loading questions...</h2>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   if (submitted && result) {\r\n// //     return (\r\n// //       <div className=\"result-container card\">\r\n// //         <h2>Exam Submitted</h2>\r\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\r\n// //         </div>\r\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   const q = questions[current];\r\n// //   const minutes = Math.floor(timeLeft / 60);\r\n// //   const seconds = timeLeft % 60;\r\n\r\n// //   return (\r\n// //     <div className=\"exam-container\">\r\n// //       <div\r\n// //         className=\"exam-timer\"\r\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n// //       >\r\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n// //       </div>\r\n\r\n// //       <h3>Question {current + 1} of {questions.length}</h3>\r\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n// //         {q.options.map((opt, idx) => (\r\n// //           <li\r\n// //             key={idx}\r\n// //             style={{\r\n// //               padding: '8px 12px',\r\n// //               margin: '6px 0',\r\n// //               border: '2px solid',\r\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n// //               borderRadius: 6,\r\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n// //               cursor: 'pointer',\r\n// //               fontWeight: answers[current] === idx ? 600 : 400\r\n// //             }}\r\n// //             onClick={() => handleOption(idx)}\r\n// //           >\r\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n// //               {String.fromCharCode(65 + idx)}.\r\n// //             </span>\r\n// //             {opt}\r\n// //           </li>\r\n// //         ))}\r\n// //       </ul>\r\n\r\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n// //         <button onClick={handleSubmit}>Submit Exam</button>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./Exam.css\";\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n//   const shuffleArray = (arr) => {\r\n//     let newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load questions on start\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//       // Resume ongoing exam\r\n//       setQuestions(JSON.parse(storedQuestions));\r\n//       setAnswers(JSON.parse(storedAnswers));\r\n//       setCurrent(parseInt(storedCurrent, 10));\r\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//     } else {\r\n//       // Fetch new questions\r\n//       getQuestions(token).then(res => {\r\n//         const shuffled = shuffleArray(res.data);\r\n//         setQuestions(shuffled);\r\n//         setAnswers(Array(shuffled.length).fill(null));\r\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//       });\r\n//     }\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id,\r\n//       selectedOption: answers[i]\r\n//     }));\r\n\r\n//     submitExam(payload, token).then(() => {\r\n//       setSubmitted(true);\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       // Fetch final result\r\n//       getResult(token).then(r => {\r\n//         setResult(r.data);\r\n//         window.location.hash = '#/results';\r\n//       });\r\n//     });\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) {\r\n//     return (\r\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n//         <h2>Loading questions...</h2>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (submitted && result) {\r\n//     return (\r\n//       <div className=\"result-container card\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n//           <strong>Score:</strong> {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div\r\n//         className=\"exam-timer\"\r\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n//       >\r\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n//       </div>\r\n\r\n//       <h3>Question {current + 1} of {questions.length}</h3>\r\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             style={{\r\n//               padding: '8px 12px',\r\n//               margin: '6px 0',\r\n//               border: '2px solid',\r\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n//               cursor: 'pointer',\r\n//               fontWeight: answers[current] === idx ? 600 : 400\r\n//             }}\r\n//             onClick={() => handleOption(idx)}\r\n//           >\r\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n//               {String.fromCharCode(65 + idx)}.\r\n//             </span>\r\n//             {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./Exam.css\";\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n//   // Shuffle questions\r\n//   const shuffleArray = (arr) => {\r\n//     const newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load questions or resume\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     getResult(token)\r\n//       .then(res => {\r\n//         if (res.data && res.data.review) {\r\n//           setSubmitted(true);\r\n//           setResult(res.data);\r\n//         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//           setQuestions(JSON.parse(storedQuestions));\r\n//           setAnswers(JSON.parse(storedAnswers));\r\n//           setCurrent(parseInt(storedCurrent, 10));\r\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//         } else {\r\n//           getQuestions(token).then(res => {\r\n//             const shuffled = shuffleArray(res.data);\r\n//             setQuestions(shuffled);\r\n//             setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\r\n//             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//           }).catch(err => console.error(\"Error fetching questions:\", err));\r\n//         }\r\n//       })\r\n//       .catch(err => {\r\n//         // fallback\r\n//         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//           setQuestions(JSON.parse(storedQuestions));\r\n//           setAnswers(JSON.parse(storedAnswers));\r\n//           setCurrent(parseInt(storedCurrent, 10));\r\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//         }\r\n//       });\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Countdown\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id || q.id,\r\n//       selectedOption: answers[i] // can be undefined\r\n//     }));\r\n\r\n//     console.log(\"Submitting payload:\", payload); // debug\r\n\r\n//     submitExam(payload, token)\r\n//       .then(() => {\r\n//         setSubmitted(true);\r\n//         localStorage.removeItem(\"exam_questions\");\r\n//         localStorage.removeItem(\"exam_answers\");\r\n//         localStorage.removeItem(\"exam_current\");\r\n//         localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//         getResult(token).then(r => {\r\n//           setResult(r.data);\r\n//           window.location.hash = '#/results';\r\n//         });\r\n//       })\r\n//       .catch(err => {\r\n//         console.error(\"Error submitting exam:\", err.response?.data || err.message);\r\n//         alert(\"Error submitting exam. Please try again.\");\r\n//       });\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) {\r\n//     return <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>Loading questions...</div>;\r\n//   }\r\n\r\n//   if (submitted && result) {\r\n//     return (\r\n//       <div className=\"result-container card\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n//           <strong>Score:</strong> {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div className=\"exam-timer\" style={{ textAlign: 'right', fontWeight: 600, color: '#d32f2f', marginBottom: 16, fontSize: '1.3em' }}>\r\n//         Time Left: {minutes.toString().padStart(2,'0')}:{seconds.toString().padStart(2,'0')}\r\n//       </div>\r\n\r\n//       <h3>Question {current + 1} of {questions.length}</h3>\r\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li key={idx} style={{\r\n//             padding: '8px 12px',\r\n//             margin: '6px 0',\r\n//             border: '2px solid',\r\n//             borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n//             borderRadius: 6,\r\n//             backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n//             cursor: 'pointer',\r\n//             fontWeight: answers[current] === idx ? 600 : 400\r\n//           }}\r\n//           onClick={() => handleOption(idx)}>\r\n//             <span style={{ fontWeight:'bold', marginRight:6 }}>{String.fromCharCode(65+idx)}.</span>\r\n//             {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       <div style={{ display:'flex', gap:'16px', marginTop:'18px' }}>\r\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\r\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n// import './Exam.css';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n//   useEffect(() => {\r\n//     getQuestions(token).then(res => {\r\n//       setQuestions(res.data);\r\n//       setAnswers(Array(res.data.length).fill(null));\r\n//     }).catch(err => console.error(err));\r\n//   }, [token]);\r\n\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft, questions, submitted]);\r\n\r\n//   const handleOption = idx => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n//     const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\r\n//     submitExam(payload, token)\r\n//       .then(() => getResult(token))\r\n//       .then(r => {\r\n//         setSubmitted(true);\r\n//         setResult(r.data);\r\n//         window.location.hash = '#/results';\r\n//       })\r\n//       .catch(err => alert('Error submitting exam. Please try again.'));\r\n//   };\r\n\r\n//   if (!questions.length) return <div>Loading questions...</div>;\r\n\r\n//   if (submitted && result) return (\r\n//     <div>\r\n//       <h2>Exam Submitted</h2>\r\n//       <div>Score: {result.score} / {result.review.length}</div>\r\n//       <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//     </div>\r\n//   );\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div>Time Left: {minutes}:{seconds.toString().padStart(2,'0')}</div>\r\n//       <h3>Question {current+1} of {questions.length}</h3>\r\n//       <div>{q.question}</div>\r\n//       <ul>\r\n//         {q.options.map((opt, i) => (\r\n//           <li key={i} onClick={() => handleOption(i)} style={{ fontWeight: answers[current] === i ? 'bold' : 'normal' }}>\r\n//             {String.fromCharCode(65+i)}. {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <div>\r\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\r\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";   // âœ… Add this line\r\n// import { getQuestions, submitExam, getResult } from \"./api\";\r\n// import \"./Exam.css\";\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n//   const shuffleArray = (arr) => {\r\n//     let newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load state or fetch\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//       setQuestions(JSON.parse(storedQuestions));\r\n//       setAnswers(JSON.parse(storedAnswers));\r\n//       setCurrent(parseInt(storedCurrent, 10));\r\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//     } else {\r\n//       getQuestions(token).then((res) => {\r\n//         const shuffled = shuffleArray(res.data);\r\n//         setQuestions(shuffled);\r\n//         setAnswers(Array(shuffled.length).fill(null));\r\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//         localStorage.setItem(\"exam_answers\", JSON.stringify(Array(shuffled.length).fill(null)));\r\n//         localStorage.setItem(\"exam_current\", 0);\r\n//         localStorage.setItem(\"exam_timeLeft\", 30 * 60);\r\n//       });\r\n//     }\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => {\r\n//       setTimeLeft((t) => {\r\n//         localStorage.setItem(\"exam_timeLeft\", t - 1);\r\n//         return t - 1;\r\n//       });\r\n//     }, 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n//     const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\r\n\r\n//     submitExam(payload, token)\r\n//       .then(() => {\r\n//         setSubmitted(true);\r\n//         localStorage.removeItem(\"exam_questions\");\r\n//         localStorage.removeItem(\"exam_answers\");\r\n//         localStorage.removeItem(\"exam_current\");\r\n//         localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//         getResult(token).then((r) => {\r\n//           setResult(r.data);\r\n//           window.location.hash = \"#/results\";\r\n//         });\r\n//       })\r\n//       .catch(() => alert(\"Error submitting exam. Please try again.\"));\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) return <div className=\"exam-container\">Loading questions...</div>;\r\n//   if (submitted && result)\r\n//     return (\r\n//       <div className=\"exam-container\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div>\r\n//           Score: {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\r\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\r\n//       </div>\r\n//       <h3>\r\n//         Question {current + 1} of {questions.length}\r\n//       </h3>\r\n//       <div>{q.question}</div>\r\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             onClick={() => handleOption(idx)}\r\n//             style={{\r\n//               padding: \"8px\",\r\n//               margin: \"6px 0\",\r\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             {String.fromCharCode(65 + idx)}. {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent((c) => c - 1)}>\r\n//           Previous\r\n//         </button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent((c) => c + 1)}>\r\n//           Next\r\n//         </button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}