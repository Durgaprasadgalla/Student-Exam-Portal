{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sridh\\\\Desktop\\\\new-exam-builder-ace-main\\\\frontend\\\\src\\\\Exam.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import \"./Exam.css\";\n// // import { getQuestions, submitExam, getResult } from './api';\n\n// // function Exam({ token }) {\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState([]);\n// //   const [current, setCurrent] = useState(0);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [result, setResult] = useState(null);\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n// //   // Utility: Shuffle array\n// //   const shuffleArray = (arr) => {\n// //     let newArr = [...arr];\n// //     for (let i = newArr.length - 1; i > 0; i--) {\n// //       const j = Math.floor(Math.random() * (i + 1));\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n// //     }\n// //     return newArr;\n// //   };\n\n// //   // Load exam state or fetch new questions\n// //   useEffect(() => {\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n// //     getResult(token)\n// //       .then(r => {\n// //         if (r.data && r.data.review) {\n// //           // Already submitted\n// //           setSubmitted(true);\n// //           setResult(r.data);\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           // Resume ongoing exam\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           // Start new exam with shuffled questions\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       })\n// //       .catch(() => {\n// //         // Offline or API error â€” fallback to stored state\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       });\n// //   }, [token]);\n\n// //   // Save progress\n// //   useEffect(() => {\n// //     if (questions.length && !submitted) {\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n// //       localStorage.setItem(\"exam_current\", current);\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n// //     }\n// //   }, [questions, answers, current, timeLeft, submitted]);\n\n// //   // Countdown timer\n// //   useEffect(() => {\n// //     if (!questions.length || submitted) return;\n// //     if (timeLeft <= 0) {\n// //       handleSubmit();\n// //       return;\n// //     }\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n// //     return () => clearTimeout(timer);\n// //   }, [questions.length, submitted, timeLeft]);\n\n// //   const handleOption = (idx) => {\n// //     const newAnswers = [...answers];\n// //     newAnswers[current] = idx;\n// //     setAnswers(newAnswers);\n// //   };\n\n// //   const handleSubmit = () => {\n// //     if (submitted) return;\n\n// //     const payload = questions.map((q, i) => ({\n// //       questionId: q._id,\n// //       selectedOption: answers[i]\n// //     }));\n\n// //     submitExam(payload, token).then(() => {\n// //       setSubmitted(true);\n// //       // Clear saved progress\n// //       localStorage.removeItem(\"exam_questions\");\n// //       localStorage.removeItem(\"exam_answers\");\n// //       localStorage.removeItem(\"exam_current\");\n// //       localStorage.removeItem(\"exam_timeLeft\");\n\n// //       getResult(token).then(r => {\n// //         setResult(r.data);\n// //         window.location.hash = '#/results';\n// //       });\n// //     });\n// //   };\n\n// //   if (!questions.length && !submitted) {\n// //     return (\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n// //         <h2>Loading questions...</h2>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (submitted && result) {\n// //     return (\n// //       <div className=\"result-container card\">\n// //         <h2>Exam Submitted</h2>\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\n// //         </div>\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n// //       </div>\n// //     );\n// //   }\n\n// //   const q = questions[current];\n// //   const minutes = Math.floor(timeLeft / 60);\n// //   const seconds = timeLeft % 60;\n\n// //   return (\n// //     <div className=\"exam-container\">\n// //       <div\n// //         className=\"exam-timer\"\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n// //       >\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n// //       </div>\n\n// //       <h3>Question {current + 1} of {questions.length}</h3>\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\n// //         {q.options.map((opt, idx) => (\n// //           <li\n// //             key={idx}\n// //             style={{\n// //               padding: '8px 12px',\n// //               margin: '6px 0',\n// //               border: '2px solid',\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n// //               borderRadius: 6,\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n// //               cursor: 'pointer',\n// //               fontWeight: answers[current] === idx ? 600 : 400\n// //             }}\n// //             onClick={() => handleOption(idx)}\n// //           >\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n// //               {String.fromCharCode(65 + idx)}.\n// //             </span>\n// //             {opt}\n// //           </li>\n// //         ))}\n// //       </ul>\n\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n// //         <button onClick={handleSubmit}>Submit Exam</button>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./Exam.css\";\n// import { getQuestions, submitExam, getResult } from './api';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n//   const shuffleArray = (arr) => {\n//     let newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load questions on start\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//       // Resume ongoing exam\n//       setQuestions(JSON.parse(storedQuestions));\n//       setAnswers(JSON.parse(storedAnswers));\n//       setCurrent(parseInt(storedCurrent, 10));\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\n//     } else {\n//       // Fetch new questions\n//       getQuestions(token).then(res => {\n//         const shuffled = shuffleArray(res.data);\n//         setQuestions(shuffled);\n//         setAnswers(Array(shuffled.length).fill(null));\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//       });\n//     }\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id,\n//       selectedOption: answers[i]\n//     }));\n\n//     submitExam(payload, token).then(() => {\n//       setSubmitted(true);\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       // Fetch final result\n//       getResult(token).then(r => {\n//         setResult(r.data);\n//         window.location.hash = '#/results';\n//       });\n//     });\n//   };\n\n//   if (!questions.length && !submitted) {\n//     return (\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n//         <h2>Loading questions...</h2>\n//       </div>\n//     );\n//   }\n\n//   if (submitted && result) {\n//     return (\n//       <div className=\"result-container card\">\n//         <h2>Exam Submitted</h2>\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n//           <strong>Score:</strong> {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//       </div>\n//     );\n//   }\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div\n//         className=\"exam-timer\"\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n//       >\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n//       </div>\n\n//       <h3>Question {current + 1} of {questions.length}</h3>\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             style={{\n//               padding: '8px 12px',\n//               margin: '6px 0',\n//               border: '2px solid',\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n//               cursor: 'pointer',\n//               fontWeight: answers[current] === idx ? 600 : 400\n//             }}\n//             onClick={() => handleOption(idx)}\n//           >\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n//               {String.fromCharCode(65 + idx)}.\n//             </span>\n//             {opt}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\nimport React, { useState, useEffect } from 'react';\nimport \"./Exam.css\";\nimport { getQuestions, submitExam, getResult } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Exam({\n  token\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [current, setCurrent] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const [result, setResult] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n  // Shuffle questions\n  const shuffleArray = arr => {\n    const newArr = [...arr];\n    for (let i = newArr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n    }\n    return newArr;\n  };\n\n  // Load questions or resume\n  useEffect(() => {\n    const storedQuestions = localStorage.getItem(\"exam_questions\");\n    const storedAnswers = localStorage.getItem(\"exam_answers\");\n    const storedCurrent = localStorage.getItem(\"exam_current\");\n    const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n    getResult(token).then(res => {\n      if (res.data && res.data.review) {\n        setSubmitted(true);\n        setResult(res.data);\n      } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n        setQuestions(JSON.parse(storedQuestions));\n        setAnswers(JSON.parse(storedAnswers));\n        setCurrent(parseInt(storedCurrent, 10));\n        setTimeLeft(parseInt(storedTimeLeft, 10));\n      } else {\n        getQuestions(token).then(res => {\n          const shuffled = shuffleArray(res.data);\n          setQuestions(shuffled);\n          setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\n          localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n        }).catch(err => console.error(\"Error fetching questions:\", err));\n      }\n    }).catch(err => {\n      // fallback\n      if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n        setQuestions(JSON.parse(storedQuestions));\n        setAnswers(JSON.parse(storedAnswers));\n        setCurrent(parseInt(storedCurrent, 10));\n        setTimeLeft(parseInt(storedTimeLeft, 10));\n      }\n    });\n  }, [token]);\n\n  // Save progress\n  useEffect(() => {\n    if (questions.length && !submitted) {\n      localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n      localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n      localStorage.setItem(\"exam_current\", current);\n      localStorage.setItem(\"exam_timeLeft\", timeLeft);\n    }\n  }, [questions, answers, current, timeLeft, submitted]);\n\n  // Countdown\n  useEffect(() => {\n    if (!questions.length || submitted) return;\n    if (timeLeft <= 0) {\n      handleSubmit();\n      return;\n    }\n    const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n    return () => clearTimeout(timer);\n  }, [questions.length, submitted, timeLeft]);\n  const handleOption = idx => {\n    const newAnswers = [...answers];\n    newAnswers[current] = idx;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = () => {\n    if (submitted) return;\n    const payload = questions.map((q, i) => ({\n      questionId: q._id || q.id,\n      selectedOption: answers[i] // can be undefined\n    }));\n    console.log(\"Submitting payload:\", payload); // debug\n\n    submitExam(payload, token).then(() => {\n      setSubmitted(true);\n      localStorage.removeItem(\"exam_questions\");\n      localStorage.removeItem(\"exam_answers\");\n      localStorage.removeItem(\"exam_current\");\n      localStorage.removeItem(\"exam_timeLeft\");\n      getResult(token).then(r => {\n        setResult(r.data);\n        window.location.hash = '#/results';\n      });\n    }).catch(err => {\n      var _err$response;\n      console.error(\"Error submitting exam:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n      alert(\"Error submitting exam. Please try again.\");\n    });\n  };\n  if (!questions.length && !submitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exam-container\",\n      style: {\n        textAlign: 'center',\n        padding: '60px 0'\n      },\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 12\n    }, this);\n  }\n  if (submitted && result) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Exam Submitted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '1.2em',\n          margin: '12px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Score:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), \" \", result.score, \" / \", result.review.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.hash = '#/dashboard',\n        children: \"Return to Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this);\n  }\n  const q = questions[current];\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exam-timer\",\n      style: {\n        textAlign: 'right',\n        fontWeight: 600,\n        color: '#d32f2f',\n        marginBottom: 16,\n        fontSize: '1.3em'\n      },\n      children: [\"Time Left: \", minutes.toString().padStart(2, '0'), \":\", seconds.toString().padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Question \", current + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      style: {\n        marginBottom: 16\n      },\n      children: q.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyle: 'none',\n        padding: 0\n      },\n      children: q.options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          padding: '8px 12px',\n          margin: '6px 0',\n          border: '2px solid',\n          borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n          borderRadius: 6,\n          backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n          cursor: 'pointer',\n          fontWeight: answers[current] === idx ? 600 : 400\n        },\n        onClick: () => handleOption(idx),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold',\n            marginRight: 6\n          },\n          children: [String.fromCharCode(65 + idx), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }, this), opt]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        gap: '16px',\n        marginTop: '18px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === 0,\n        onClick: () => setCurrent(c => c - 1),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === questions.length - 1,\n        onClick: () => setCurrent(c => c + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Exam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 495,\n    columnNumber: 5\n  }, this);\n}\n_s(Exam, \"LVcM3/jyynNiWHDKURDdjk1DzKQ=\");\n_c = Exam;\nexport default Exam;\nvar _c;\n$RefreshReg$(_c, \"Exam\");","map":{"version":3,"names":["React","useState","useEffect","getQuestions","submitExam","getResult","jsxDEV","_jsxDEV","Exam","token","_s","questions","setQuestions","answers","setAnswers","current","setCurrent","submitted","setSubmitted","result","setResult","timeLeft","setTimeLeft","shuffleArray","arr","newArr","i","length","j","Math","floor","random","storedQuestions","localStorage","getItem","storedAnswers","storedCurrent","storedTimeLeft","then","res","data","review","JSON","parse","parseInt","shuffled","Array","fill","undefined","setItem","stringify","catch","err","console","error","handleSubmit","timer","setTimeout","t","clearTimeout","handleOption","idx","newAnswers","payload","map","q","questionId","_id","id","selectedOption","log","removeItem","r","window","location","hash","_err$response","response","message","alert","className","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","fontSize","margin","score","onClick","minutes","seconds","fontWeight","color","marginBottom","toString","padStart","question","listStyle","options","opt","border","borderColor","borderRadius","backgroundColor","cursor","marginRight","String","fromCharCode","display","gap","marginTop","disabled","c","_c","$RefreshReg$"],"sources":["C:/Users/Sridh/Desktop/new-exam-builder-ace-main/frontend/src/Exam.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import \"./Exam.css\";\r\n// // import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// // function Exam({ token }) {\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState([]);\r\n// //   const [current, setCurrent] = useState(0);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [result, setResult] = useState(null);\r\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n// //   // Utility: Shuffle array\r\n// //   const shuffleArray = (arr) => {\r\n// //     let newArr = [...arr];\r\n// //     for (let i = newArr.length - 1; i > 0; i--) {\r\n// //       const j = Math.floor(Math.random() * (i + 1));\r\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n// //     }\r\n// //     return newArr;\r\n// //   };\r\n\r\n// //   // Load exam state or fetch new questions\r\n// //   useEffect(() => {\r\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n// //     getResult(token)\r\n// //       .then(r => {\r\n// //         if (r.data && r.data.review) {\r\n// //           // Already submitted\r\n// //           setSubmitted(true);\r\n// //           setResult(r.data);\r\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           // Resume ongoing exam\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           // Start new exam with shuffled questions\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       })\r\n// //       .catch(() => {\r\n// //         // Offline or API error â€” fallback to stored state\r\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       });\r\n// //   }, [token]);\r\n\r\n// //   // Save progress\r\n// //   useEffect(() => {\r\n// //     if (questions.length && !submitted) {\r\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n// //       localStorage.setItem(\"exam_current\", current);\r\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n// //     }\r\n// //   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n// //   // Countdown timer\r\n// //   useEffect(() => {\r\n// //     if (!questions.length || submitted) return;\r\n// //     if (timeLeft <= 0) {\r\n// //       handleSubmit();\r\n// //       return;\r\n// //     }\r\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n// //     return () => clearTimeout(timer);\r\n// //   }, [questions.length, submitted, timeLeft]);\r\n\r\n// //   const handleOption = (idx) => {\r\n// //     const newAnswers = [...answers];\r\n// //     newAnswers[current] = idx;\r\n// //     setAnswers(newAnswers);\r\n// //   };\r\n\r\n// //   const handleSubmit = () => {\r\n// //     if (submitted) return;\r\n\r\n// //     const payload = questions.map((q, i) => ({\r\n// //       questionId: q._id,\r\n// //       selectedOption: answers[i]\r\n// //     }));\r\n\r\n// //     submitExam(payload, token).then(() => {\r\n// //       setSubmitted(true);\r\n// //       // Clear saved progress\r\n// //       localStorage.removeItem(\"exam_questions\");\r\n// //       localStorage.removeItem(\"exam_answers\");\r\n// //       localStorage.removeItem(\"exam_current\");\r\n// //       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n// //       getResult(token).then(r => {\r\n// //         setResult(r.data);\r\n// //         window.location.hash = '#/results';\r\n// //       });\r\n// //     });\r\n// //   };\r\n\r\n// //   if (!questions.length && !submitted) {\r\n// //     return (\r\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n// //         <h2>Loading questions...</h2>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   if (submitted && result) {\r\n// //     return (\r\n// //       <div className=\"result-container card\">\r\n// //         <h2>Exam Submitted</h2>\r\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\r\n// //         </div>\r\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   const q = questions[current];\r\n// //   const minutes = Math.floor(timeLeft / 60);\r\n// //   const seconds = timeLeft % 60;\r\n\r\n// //   return (\r\n// //     <div className=\"exam-container\">\r\n// //       <div\r\n// //         className=\"exam-timer\"\r\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n// //       >\r\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n// //       </div>\r\n\r\n// //       <h3>Question {current + 1} of {questions.length}</h3>\r\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n// //         {q.options.map((opt, idx) => (\r\n// //           <li\r\n// //             key={idx}\r\n// //             style={{\r\n// //               padding: '8px 12px',\r\n// //               margin: '6px 0',\r\n// //               border: '2px solid',\r\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n// //               borderRadius: 6,\r\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n// //               cursor: 'pointer',\r\n// //               fontWeight: answers[current] === idx ? 600 : 400\r\n// //             }}\r\n// //             onClick={() => handleOption(idx)}\r\n// //           >\r\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n// //               {String.fromCharCode(65 + idx)}.\r\n// //             </span>\r\n// //             {opt}\r\n// //           </li>\r\n// //         ))}\r\n// //       </ul>\r\n\r\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n// //         <button onClick={handleSubmit}>Submit Exam</button>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./Exam.css\";\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n//   const shuffleArray = (arr) => {\r\n//     let newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load questions on start\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//       // Resume ongoing exam\r\n//       setQuestions(JSON.parse(storedQuestions));\r\n//       setAnswers(JSON.parse(storedAnswers));\r\n//       setCurrent(parseInt(storedCurrent, 10));\r\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//     } else {\r\n//       // Fetch new questions\r\n//       getQuestions(token).then(res => {\r\n//         const shuffled = shuffleArray(res.data);\r\n//         setQuestions(shuffled);\r\n//         setAnswers(Array(shuffled.length).fill(null));\r\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//       });\r\n//     }\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id,\r\n//       selectedOption: answers[i]\r\n//     }));\r\n\r\n//     submitExam(payload, token).then(() => {\r\n//       setSubmitted(true);\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       // Fetch final result\r\n//       getResult(token).then(r => {\r\n//         setResult(r.data);\r\n//         window.location.hash = '#/results';\r\n//       });\r\n//     });\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) {\r\n//     return (\r\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n//         <h2>Loading questions...</h2>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (submitted && result) {\r\n//     return (\r\n//       <div className=\"result-container card\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n//           <strong>Score:</strong> {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div\r\n//         className=\"exam-timer\"\r\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n//       >\r\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n//       </div>\r\n\r\n//       <h3>Question {current + 1} of {questions.length}</h3>\r\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             style={{\r\n//               padding: '8px 12px',\r\n//               margin: '6px 0',\r\n//               border: '2px solid',\r\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n//               cursor: 'pointer',\r\n//               fontWeight: answers[current] === idx ? 600 : 400\r\n//             }}\r\n//             onClick={() => handleOption(idx)}\r\n//           >\r\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n//               {String.fromCharCode(65 + idx)}.\r\n//             </span>\r\n//             {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport \"./Exam.css\";\r\nimport { getQuestions, submitExam, getResult } from './api';\r\n\r\nfunction Exam({ token }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [current, setCurrent] = useState(0);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [result, setResult] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n  // Shuffle questions\r\n  const shuffleArray = (arr) => {\r\n    const newArr = [...arr];\r\n    for (let i = newArr.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n    }\r\n    return newArr;\r\n  };\r\n\r\n  // Load questions or resume\r\n  useEffect(() => {\r\n    const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n    const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n    const storedCurrent = localStorage.getItem(\"exam_current\");\r\n    const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n    getResult(token)\r\n      .then(res => {\r\n        if (res.data && res.data.review) {\r\n          setSubmitted(true);\r\n          setResult(res.data);\r\n        } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n          setQuestions(JSON.parse(storedQuestions));\r\n          setAnswers(JSON.parse(storedAnswers));\r\n          setCurrent(parseInt(storedCurrent, 10));\r\n          setTimeLeft(parseInt(storedTimeLeft, 10));\r\n        } else {\r\n          getQuestions(token).then(res => {\r\n            const shuffled = shuffleArray(res.data);\r\n            setQuestions(shuffled);\r\n            setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\r\n            localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n          }).catch(err => console.error(\"Error fetching questions:\", err));\r\n        }\r\n      })\r\n      .catch(err => {\r\n        // fallback\r\n        if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n          setQuestions(JSON.parse(storedQuestions));\r\n          setAnswers(JSON.parse(storedAnswers));\r\n          setCurrent(parseInt(storedCurrent, 10));\r\n          setTimeLeft(parseInt(storedTimeLeft, 10));\r\n        }\r\n      });\r\n  }, [token]);\r\n\r\n  // Save progress\r\n  useEffect(() => {\r\n    if (questions.length && !submitted) {\r\n      localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n      localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n      localStorage.setItem(\"exam_current\", current);\r\n      localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n    }\r\n  }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n  // Countdown\r\n  useEffect(() => {\r\n    if (!questions.length || submitted) return;\r\n    if (timeLeft <= 0) {\r\n      handleSubmit();\r\n      return;\r\n    }\r\n    const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [questions.length, submitted, timeLeft]);\r\n\r\n  const handleOption = (idx) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[current] = idx;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (submitted) return;\r\n\r\n    const payload = questions.map((q, i) => ({\r\n      questionId: q._id || q.id,\r\n      selectedOption: answers[i] // can be undefined\r\n    }));\r\n\r\n    console.log(\"Submitting payload:\", payload); // debug\r\n\r\n    submitExam(payload, token)\r\n      .then(() => {\r\n        setSubmitted(true);\r\n        localStorage.removeItem(\"exam_questions\");\r\n        localStorage.removeItem(\"exam_answers\");\r\n        localStorage.removeItem(\"exam_current\");\r\n        localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n        getResult(token).then(r => {\r\n          setResult(r.data);\r\n          window.location.hash = '#/results';\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Error submitting exam:\", err.response?.data || err.message);\r\n        alert(\"Error submitting exam. Please try again.\");\r\n      });\r\n  };\r\n\r\n  if (!questions.length && !submitted) {\r\n    return <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>Loading questions...</div>;\r\n  }\r\n\r\n  if (submitted && result) {\r\n    return (\r\n      <div className=\"result-container card\">\r\n        <h2>Exam Submitted</h2>\r\n        <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n          <strong>Score:</strong> {result.score} / {result.review.length}\r\n        </div>\r\n        <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const q = questions[current];\r\n  const minutes = Math.floor(timeLeft / 60);\r\n  const seconds = timeLeft % 60;\r\n\r\n  return (\r\n    <div className=\"exam-container\">\r\n      <div className=\"exam-timer\" style={{ textAlign: 'right', fontWeight: 600, color: '#d32f2f', marginBottom: 16, fontSize: '1.3em' }}>\r\n        Time Left: {minutes.toString().padStart(2,'0')}:{seconds.toString().padStart(2,'0')}\r\n      </div>\r\n\r\n      <h3>Question {current + 1} of {questions.length}</h3>\r\n      <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n      <ul style={{ listStyle: 'none', padding: 0 }}>\r\n        {q.options.map((opt, idx) => (\r\n          <li key={idx} style={{\r\n            padding: '8px 12px',\r\n            margin: '6px 0',\r\n            border: '2px solid',\r\n            borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n            borderRadius: 6,\r\n            backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n            cursor: 'pointer',\r\n            fontWeight: answers[current] === idx ? 600 : 400\r\n          }}\r\n          onClick={() => handleOption(idx)}>\r\n            <span style={{ fontWeight:'bold', marginRight:6 }}>{String.fromCharCode(65+idx)}.</span>\r\n            {opt}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <div style={{ display:'flex', gap:'16px', marginTop:'18px' }}>\r\n        <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\r\n        <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\r\n        <button onClick={handleSubmit}>Submit Exam</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Exam;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}