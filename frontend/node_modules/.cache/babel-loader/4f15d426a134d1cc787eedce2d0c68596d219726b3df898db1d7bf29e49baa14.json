{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sridh\\\\Desktop\\\\new-exam-builder-ace-main\\\\frontend\\\\src\\\\Exam.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import \"./Exam.css\";\n// // import { getQuestions, submitExam, getResult } from './api';\n\n// // function Exam({ token }) {\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState([]);\n// //   const [current, setCurrent] = useState(0);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [result, setResult] = useState(null);\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n// //   // Utility: Shuffle array\n// //   const shuffleArray = (arr) => {\n// //     let newArr = [...arr];\n// //     for (let i = newArr.length - 1; i > 0; i--) {\n// //       const j = Math.floor(Math.random() * (i + 1));\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n// //     }\n// //     return newArr;\n// //   };\n\n// //   // Load exam state or fetch new questions\n// //   useEffect(() => {\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n// //     getResult(token)\n// //       .then(r => {\n// //         if (r.data && r.data.review) {\n// //           // Already submitted\n// //           setSubmitted(true);\n// //           setResult(r.data);\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           // Resume ongoing exam\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           // Start new exam with shuffled questions\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       })\n// //       .catch(() => {\n// //         // Offline or API error â€” fallback to stored state\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       });\n// //   }, [token]);\n\n// //   // Save progress\n// //   useEffect(() => {\n// //     if (questions.length && !submitted) {\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n// //       localStorage.setItem(\"exam_current\", current);\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n// //     }\n// //   }, [questions, answers, current, timeLeft, submitted]);\n\n// //   // Countdown timer\n// //   useEffect(() => {\n// //     if (!questions.length || submitted) return;\n// //     if (timeLeft <= 0) {\n// //       handleSubmit();\n// //       return;\n// //     }\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n// //     return () => clearTimeout(timer);\n// //   }, [questions.length, submitted, timeLeft]);\n\n// //   const handleOption = (idx) => {\n// //     const newAnswers = [...answers];\n// //     newAnswers[current] = idx;\n// //     setAnswers(newAnswers);\n// //   };\n\n// //   const handleSubmit = () => {\n// //     if (submitted) return;\n\n// //     const payload = questions.map((q, i) => ({\n// //       questionId: q._id,\n// //       selectedOption: answers[i]\n// //     }));\n\n// //     submitExam(payload, token).then(() => {\n// //       setSubmitted(true);\n// //       // Clear saved progress\n// //       localStorage.removeItem(\"exam_questions\");\n// //       localStorage.removeItem(\"exam_answers\");\n// //       localStorage.removeItem(\"exam_current\");\n// //       localStorage.removeItem(\"exam_timeLeft\");\n\n// //       getResult(token).then(r => {\n// //         setResult(r.data);\n// //         window.location.hash = '#/results';\n// //       });\n// //     });\n// //   };\n\n// //   if (!questions.length && !submitted) {\n// //     return (\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n// //         <h2>Loading questions...</h2>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (submitted && result) {\n// //     return (\n// //       <div className=\"result-container card\">\n// //         <h2>Exam Submitted</h2>\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\n// //         </div>\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n// //       </div>\n// //     );\n// //   }\n\n// //   const q = questions[current];\n// //   const minutes = Math.floor(timeLeft / 60);\n// //   const seconds = timeLeft % 60;\n\n// //   return (\n// //     <div className=\"exam-container\">\n// //       <div\n// //         className=\"exam-timer\"\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n// //       >\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n// //       </div>\n\n// //       <h3>Question {current + 1} of {questions.length}</h3>\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\n// //         {q.options.map((opt, idx) => (\n// //           <li\n// //             key={idx}\n// //             style={{\n// //               padding: '8px 12px',\n// //               margin: '6px 0',\n// //               border: '2px solid',\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n// //               borderRadius: 6,\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n// //               cursor: 'pointer',\n// //               fontWeight: answers[current] === idx ? 600 : 400\n// //             }}\n// //             onClick={() => handleOption(idx)}\n// //           >\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n// //               {String.fromCharCode(65 + idx)}.\n// //             </span>\n// //             {opt}\n// //           </li>\n// //         ))}\n// //       </ul>\n\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n// //         <button onClick={handleSubmit}>Submit Exam</button>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./Exam.css\";\n// import { getQuestions, submitExam, getResult } from './api';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n//   const shuffleArray = (arr) => {\n//     let newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load questions on start\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//       // Resume ongoing exam\n//       setQuestions(JSON.parse(storedQuestions));\n//       setAnswers(JSON.parse(storedAnswers));\n//       setCurrent(parseInt(storedCurrent, 10));\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\n//     } else {\n//       // Fetch new questions\n//       getQuestions(token).then(res => {\n//         const shuffled = shuffleArray(res.data);\n//         setQuestions(shuffled);\n//         setAnswers(Array(shuffled.length).fill(null));\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//       });\n//     }\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id,\n//       selectedOption: answers[i]\n//     }));\n\n//     submitExam(payload, token).then(() => {\n//       setSubmitted(true);\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       // Fetch final result\n//       getResult(token).then(r => {\n//         setResult(r.data);\n//         window.location.hash = '#/results';\n//       });\n//     });\n//   };\n\n//   if (!questions.length && !submitted) {\n//     return (\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n//         <h2>Loading questions...</h2>\n//       </div>\n//     );\n//   }\n\n//   if (submitted && result) {\n//     return (\n//       <div className=\"result-container card\">\n//         <h2>Exam Submitted</h2>\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n//           <strong>Score:</strong> {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//       </div>\n//     );\n//   }\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div\n//         className=\"exam-timer\"\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n//       >\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n//       </div>\n\n//       <h3>Question {current + 1} of {questions.length}</h3>\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             style={{\n//               padding: '8px 12px',\n//               margin: '6px 0',\n//               border: '2px solid',\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n//               cursor: 'pointer',\n//               fontWeight: answers[current] === idx ? 600 : 400\n//             }}\n//             onClick={() => handleOption(idx)}\n//           >\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n//               {String.fromCharCode(65 + idx)}.\n//             </span>\n//             {opt}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./Exam.css\";\n// import { getQuestions, submitExam, getResult } from './api';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n//   // Shuffle questions\n//   const shuffleArray = (arr) => {\n//     const newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load questions or resume\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     getResult(token)\n//       .then(res => {\n//         if (res.data && res.data.review) {\n//           setSubmitted(true);\n//           setResult(res.data);\n//         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//           setQuestions(JSON.parse(storedQuestions));\n//           setAnswers(JSON.parse(storedAnswers));\n//           setCurrent(parseInt(storedCurrent, 10));\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\n//         } else {\n//           getQuestions(token).then(res => {\n//             const shuffled = shuffleArray(res.data);\n//             setQuestions(shuffled);\n//             setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\n//             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//           }).catch(err => console.error(\"Error fetching questions:\", err));\n//         }\n//       })\n//       .catch(err => {\n//         // fallback\n//         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//           setQuestions(JSON.parse(storedQuestions));\n//           setAnswers(JSON.parse(storedAnswers));\n//           setCurrent(parseInt(storedCurrent, 10));\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\n//         }\n//       });\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Countdown\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id || q.id,\n//       selectedOption: answers[i] // can be undefined\n//     }));\n\n//     console.log(\"Submitting payload:\", payload); // debug\n\n//     submitExam(payload, token)\n//       .then(() => {\n//         setSubmitted(true);\n//         localStorage.removeItem(\"exam_questions\");\n//         localStorage.removeItem(\"exam_answers\");\n//         localStorage.removeItem(\"exam_current\");\n//         localStorage.removeItem(\"exam_timeLeft\");\n\n//         getResult(token).then(r => {\n//           setResult(r.data);\n//           window.location.hash = '#/results';\n//         });\n//       })\n//       .catch(err => {\n//         console.error(\"Error submitting exam:\", err.response?.data || err.message);\n//         alert(\"Error submitting exam. Please try again.\");\n//       });\n//   };\n\n//   if (!questions.length && !submitted) {\n//     return <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>Loading questions...</div>;\n//   }\n\n//   if (submitted && result) {\n//     return (\n//       <div className=\"result-container card\">\n//         <h2>Exam Submitted</h2>\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n//           <strong>Score:</strong> {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//       </div>\n//     );\n//   }\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div className=\"exam-timer\" style={{ textAlign: 'right', fontWeight: 600, color: '#d32f2f', marginBottom: 16, fontSize: '1.3em' }}>\n//         Time Left: {minutes.toString().padStart(2,'0')}:{seconds.toString().padStart(2,'0')}\n//       </div>\n\n//       <h3>Question {current + 1} of {questions.length}</h3>\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li key={idx} style={{\n//             padding: '8px 12px',\n//             margin: '6px 0',\n//             border: '2px solid',\n//             borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n//             borderRadius: 6,\n//             backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n//             cursor: 'pointer',\n//             fontWeight: answers[current] === idx ? 600 : 400\n//           }}\n//           onClick={() => handleOption(idx)}>\n//             <span style={{ fontWeight:'bold', marginRight:6 }}>{String.fromCharCode(65+idx)}.</span>\n//             {opt}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div style={{ display:'flex', gap:'16px', marginTop:'18px' }}>\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import { getQuestions, submitExam, getResult } from './api';\n// import './Exam.css';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n//   useEffect(() => {\n//     getQuestions(token).then(res => {\n//       setQuestions(res.data);\n//       setAnswers(Array(res.data.length).fill(null));\n//     }).catch(err => console.error(err));\n//   }, [token]);\n\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft, questions, submitted]);\n\n//   const handleOption = idx => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n//     const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\n//     submitExam(payload, token)\n//       .then(() => getResult(token))\n//       .then(r => {\n//         setSubmitted(true);\n//         setResult(r.data);\n//         window.location.hash = '#/results';\n//       })\n//       .catch(err => alert('Error submitting exam. Please try again.'));\n//   };\n\n//   if (!questions.length) return <div>Loading questions...</div>;\n\n//   if (submitted && result) return (\n//     <div>\n//       <h2>Exam Submitted</h2>\n//       <div>Score: {result.score} / {result.review.length}</div>\n//       <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//     </div>\n//   );\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div>Time Left: {minutes}:{seconds.toString().padStart(2,'0')}</div>\n//       <h3>Question {current+1} of {questions.length}</h3>\n//       <div>{q.question}</div>\n//       <ul>\n//         {q.options.map((opt, i) => (\n//           <li key={i} onClick={() => handleOption(i)} style={{ fontWeight: answers[current] === i ? 'bold' : 'normal' }}>\n//             {String.fromCharCode(65+i)}. {opt}\n//           </li>\n//         ))}\n//       </ul>\n//       <div>\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"; // âœ… Add this line\nimport { getQuestions, submitExam, getResult } from \"./api\";\nimport \"./Exam.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Exam({\n  token\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [current, setCurrent] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const [result, setResult] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(30 * 60);\n  const shuffleArray = arr => {\n    let newArr = [...arr];\n    for (let i = newArr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n    }\n    return newArr;\n  };\n\n  // Load state or fetch\n  useEffect(() => {\n    const storedQuestions = localStorage.getItem(\"exam_questions\");\n    const storedAnswers = localStorage.getItem(\"exam_answers\");\n    const storedCurrent = localStorage.getItem(\"exam_current\");\n    const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n    if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n      setQuestions(JSON.parse(storedQuestions));\n      setAnswers(JSON.parse(storedAnswers));\n      setCurrent(parseInt(storedCurrent, 10));\n      setTimeLeft(parseInt(storedTimeLeft, 10));\n    } else {\n      getQuestions(token).then(res => {\n        const shuffled = shuffleArray(res.data);\n        setQuestions(shuffled);\n        setAnswers(Array(shuffled.length).fill(null));\n        localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n        localStorage.setItem(\"exam_answers\", JSON.stringify(Array(shuffled.length).fill(null)));\n        localStorage.setItem(\"exam_current\", 0);\n        localStorage.setItem(\"exam_timeLeft\", 30 * 60);\n      });\n    }\n  }, [token]);\n\n  // Save progress\n  useEffect(() => {\n    if (questions.length && !submitted) {\n      localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n      localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n      localStorage.setItem(\"exam_current\", current);\n      localStorage.setItem(\"exam_timeLeft\", timeLeft);\n    }\n  }, [questions, answers, current, timeLeft, submitted]);\n\n  // Timer\n  useEffect(() => {\n    if (!questions.length || submitted) return;\n    if (timeLeft <= 0) {\n      handleSubmit();\n      return;\n    }\n    const timer = setTimeout(() => {\n      setTimeLeft(t => {\n        localStorage.setItem(\"exam_timeLeft\", t - 1);\n        return t - 1;\n      });\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [questions.length, submitted, timeLeft]);\n  const handleOption = idx => {\n    const newAnswers = [...answers];\n    newAnswers[current] = idx;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = () => {\n    if (submitted) return;\n    const payload = questions.map((q, i) => ({\n      questionId: q._id,\n      selectedOption: answers[i]\n    }));\n    submitExam(payload, token).then(() => {\n      setSubmitted(true);\n      localStorage.removeItem(\"exam_questions\");\n      localStorage.removeItem(\"exam_answers\");\n      localStorage.removeItem(\"exam_current\");\n      localStorage.removeItem(\"exam_timeLeft\");\n      getResult(token).then(r => {\n        setResult(r.data);\n        window.location.hash = \"#/results\";\n      });\n    }).catch(() => alert(\"Error submitting exam. Please try again.\"));\n  };\n  if (!questions.length && !submitted) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 718,\n    columnNumber: 47\n  }, this);\n  if (submitted && result) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Exam Submitted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", result.score, \" / \", result.review.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.location.hash = \"#/dashboard\",\n      children: \"Return to Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 721,\n    columnNumber: 7\n  }, this);\n  const q = questions[current];\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\",\n        color: \"#d32f2f\",\n        fontWeight: 600\n      },\n      children: [\"Time Left: \", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Question \", current + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 739,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: q.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyle: \"none\",\n        padding: 0\n      },\n      children: q.options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleOption(idx),\n        style: {\n          padding: \"8px\",\n          margin: \"6px 0\",\n          border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\n          borderRadius: 6,\n          backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\n          cursor: \"pointer\"\n        },\n        children: [String.fromCharCode(65 + idx), \". \", opt]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"12px\",\n        marginTop: \"16px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === 0,\n        onClick: () => setCurrent(c => c - 1),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === questions.length - 1,\n        onClick: () => setCurrent(c => c + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Exam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 735,\n    columnNumber: 5\n  }, this);\n}\n_s(Exam, \"LVcM3/jyynNiWHDKURDdjk1DzKQ=\");\n_c = Exam;\nexport default Exam;\nvar _c;\n$RefreshReg$(_c, \"Exam\");","map":{"version":3,"names":["React","useState","useEffect","axios","getQuestions","submitExam","getResult","jsxDEV","_jsxDEV","Exam","token","_s","questions","setQuestions","answers","setAnswers","current","setCurrent","submitted","setSubmitted","result","setResult","timeLeft","setTimeLeft","shuffleArray","arr","newArr","i","length","j","Math","floor","random","storedQuestions","localStorage","getItem","storedAnswers","storedCurrent","storedTimeLeft","JSON","parse","parseInt","then","res","shuffled","data","Array","fill","setItem","stringify","handleSubmit","timer","setTimeout","t","clearTimeout","handleOption","idx","newAnswers","payload","map","q","questionId","_id","selectedOption","removeItem","r","window","location","hash","catch","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","score","review","onClick","minutes","seconds","style","textAlign","color","fontWeight","toString","padStart","question","listStyle","padding","options","opt","margin","border","borderRadius","backgroundColor","cursor","String","fromCharCode","display","gap","marginTop","disabled","c","_c","$RefreshReg$"],"sources":["C:/Users/Sridh/Desktop/new-exam-builder-ace-main/frontend/src/Exam.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import \"./Exam.css\";\r\n// // import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// // function Exam({ token }) {\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState([]);\r\n// //   const [current, setCurrent] = useState(0);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [result, setResult] = useState(null);\r\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n// //   // Utility: Shuffle array\r\n// //   const shuffleArray = (arr) => {\r\n// //     let newArr = [...arr];\r\n// //     for (let i = newArr.length - 1; i > 0; i--) {\r\n// //       const j = Math.floor(Math.random() * (i + 1));\r\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n// //     }\r\n// //     return newArr;\r\n// //   };\r\n\r\n// //   // Load exam state or fetch new questions\r\n// //   useEffect(() => {\r\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n// //     getResult(token)\r\n// //       .then(r => {\r\n// //         if (r.data && r.data.review) {\r\n// //           // Already submitted\r\n// //           setSubmitted(true);\r\n// //           setResult(r.data);\r\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           // Resume ongoing exam\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           // Start new exam with shuffled questions\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       })\r\n// //       .catch(() => {\r\n// //         // Offline or API error â€” fallback to stored state\r\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       });\r\n// //   }, [token]);\r\n\r\n// //   // Save progress\r\n// //   useEffect(() => {\r\n// //     if (questions.length && !submitted) {\r\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n// //       localStorage.setItem(\"exam_current\", current);\r\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n// //     }\r\n// //   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n// //   // Countdown timer\r\n// //   useEffect(() => {\r\n// //     if (!questions.length || submitted) return;\r\n// //     if (timeLeft <= 0) {\r\n// //       handleSubmit();\r\n// //       return;\r\n// //     }\r\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n// //     return () => clearTimeout(timer);\r\n// //   }, [questions.length, submitted, timeLeft]);\r\n\r\n// //   const handleOption = (idx) => {\r\n// //     const newAnswers = [...answers];\r\n// //     newAnswers[current] = idx;\r\n// //     setAnswers(newAnswers);\r\n// //   };\r\n\r\n// //   const handleSubmit = () => {\r\n// //     if (submitted) return;\r\n\r\n// //     const payload = questions.map((q, i) => ({\r\n// //       questionId: q._id,\r\n// //       selectedOption: answers[i]\r\n// //     }));\r\n\r\n// //     submitExam(payload, token).then(() => {\r\n// //       setSubmitted(true);\r\n// //       // Clear saved progress\r\n// //       localStorage.removeItem(\"exam_questions\");\r\n// //       localStorage.removeItem(\"exam_answers\");\r\n// //       localStorage.removeItem(\"exam_current\");\r\n// //       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n// //       getResult(token).then(r => {\r\n// //         setResult(r.data);\r\n// //         window.location.hash = '#/results';\r\n// //       });\r\n// //     });\r\n// //   };\r\n\r\n// //   if (!questions.length && !submitted) {\r\n// //     return (\r\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n// //         <h2>Loading questions...</h2>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   if (submitted && result) {\r\n// //     return (\r\n// //       <div className=\"result-container card\">\r\n// //         <h2>Exam Submitted</h2>\r\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\r\n// //         </div>\r\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   const q = questions[current];\r\n// //   const minutes = Math.floor(timeLeft / 60);\r\n// //   const seconds = timeLeft % 60;\r\n\r\n// //   return (\r\n// //     <div className=\"exam-container\">\r\n// //       <div\r\n// //         className=\"exam-timer\"\r\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n// //       >\r\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n// //       </div>\r\n\r\n// //       <h3>Question {current + 1} of {questions.length}</h3>\r\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n// //         {q.options.map((opt, idx) => (\r\n// //           <li\r\n// //             key={idx}\r\n// //             style={{\r\n// //               padding: '8px 12px',\r\n// //               margin: '6px 0',\r\n// //               border: '2px solid',\r\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n// //               borderRadius: 6,\r\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n// //               cursor: 'pointer',\r\n// //               fontWeight: answers[current] === idx ? 600 : 400\r\n// //             }}\r\n// //             onClick={() => handleOption(idx)}\r\n// //           >\r\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n// //               {String.fromCharCode(65 + idx)}.\r\n// //             </span>\r\n// //             {opt}\r\n// //           </li>\r\n// //         ))}\r\n// //       </ul>\r\n\r\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n// //         <button onClick={handleSubmit}>Submit Exam</button>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./Exam.css\";\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n//   const shuffleArray = (arr) => {\r\n//     let newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load questions on start\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//       // Resume ongoing exam\r\n//       setQuestions(JSON.parse(storedQuestions));\r\n//       setAnswers(JSON.parse(storedAnswers));\r\n//       setCurrent(parseInt(storedCurrent, 10));\r\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//     } else {\r\n//       // Fetch new questions\r\n//       getQuestions(token).then(res => {\r\n//         const shuffled = shuffleArray(res.data);\r\n//         setQuestions(shuffled);\r\n//         setAnswers(Array(shuffled.length).fill(null));\r\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//       });\r\n//     }\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id,\r\n//       selectedOption: answers[i]\r\n//     }));\r\n\r\n//     submitExam(payload, token).then(() => {\r\n//       setSubmitted(true);\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       // Fetch final result\r\n//       getResult(token).then(r => {\r\n//         setResult(r.data);\r\n//         window.location.hash = '#/results';\r\n//       });\r\n//     });\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) {\r\n//     return (\r\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n//         <h2>Loading questions...</h2>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (submitted && result) {\r\n//     return (\r\n//       <div className=\"result-container card\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n//           <strong>Score:</strong> {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div\r\n//         className=\"exam-timer\"\r\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n//       >\r\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n//       </div>\r\n\r\n//       <h3>Question {current + 1} of {questions.length}</h3>\r\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             style={{\r\n//               padding: '8px 12px',\r\n//               margin: '6px 0',\r\n//               border: '2px solid',\r\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n//               cursor: 'pointer',\r\n//               fontWeight: answers[current] === idx ? 600 : 400\r\n//             }}\r\n//             onClick={() => handleOption(idx)}\r\n//           >\r\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n//               {String.fromCharCode(65 + idx)}.\r\n//             </span>\r\n//             {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./Exam.css\";\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n//   // Shuffle questions\r\n//   const shuffleArray = (arr) => {\r\n//     const newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load questions or resume\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     getResult(token)\r\n//       .then(res => {\r\n//         if (res.data && res.data.review) {\r\n//           setSubmitted(true);\r\n//           setResult(res.data);\r\n//         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//           setQuestions(JSON.parse(storedQuestions));\r\n//           setAnswers(JSON.parse(storedAnswers));\r\n//           setCurrent(parseInt(storedCurrent, 10));\r\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//         } else {\r\n//           getQuestions(token).then(res => {\r\n//             const shuffled = shuffleArray(res.data);\r\n//             setQuestions(shuffled);\r\n//             setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\r\n//             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//           }).catch(err => console.error(\"Error fetching questions:\", err));\r\n//         }\r\n//       })\r\n//       .catch(err => {\r\n//         // fallback\r\n//         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//           setQuestions(JSON.parse(storedQuestions));\r\n//           setAnswers(JSON.parse(storedAnswers));\r\n//           setCurrent(parseInt(storedCurrent, 10));\r\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//         }\r\n//       });\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Countdown\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id || q.id,\r\n//       selectedOption: answers[i] // can be undefined\r\n//     }));\r\n\r\n//     console.log(\"Submitting payload:\", payload); // debug\r\n\r\n//     submitExam(payload, token)\r\n//       .then(() => {\r\n//         setSubmitted(true);\r\n//         localStorage.removeItem(\"exam_questions\");\r\n//         localStorage.removeItem(\"exam_answers\");\r\n//         localStorage.removeItem(\"exam_current\");\r\n//         localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//         getResult(token).then(r => {\r\n//           setResult(r.data);\r\n//           window.location.hash = '#/results';\r\n//         });\r\n//       })\r\n//       .catch(err => {\r\n//         console.error(\"Error submitting exam:\", err.response?.data || err.message);\r\n//         alert(\"Error submitting exam. Please try again.\");\r\n//       });\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) {\r\n//     return <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>Loading questions...</div>;\r\n//   }\r\n\r\n//   if (submitted && result) {\r\n//     return (\r\n//       <div className=\"result-container card\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n//           <strong>Score:</strong> {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div className=\"exam-timer\" style={{ textAlign: 'right', fontWeight: 600, color: '#d32f2f', marginBottom: 16, fontSize: '1.3em' }}>\r\n//         Time Left: {minutes.toString().padStart(2,'0')}:{seconds.toString().padStart(2,'0')}\r\n//       </div>\r\n\r\n//       <h3>Question {current + 1} of {questions.length}</h3>\r\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li key={idx} style={{\r\n//             padding: '8px 12px',\r\n//             margin: '6px 0',\r\n//             border: '2px solid',\r\n//             borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n//             borderRadius: 6,\r\n//             backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n//             cursor: 'pointer',\r\n//             fontWeight: answers[current] === idx ? 600 : 400\r\n//           }}\r\n//           onClick={() => handleOption(idx)}>\r\n//             <span style={{ fontWeight:'bold', marginRight:6 }}>{String.fromCharCode(65+idx)}.</span>\r\n//             {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       <div style={{ display:'flex', gap:'16px', marginTop:'18px' }}>\r\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\r\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n// import './Exam.css';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n//   useEffect(() => {\r\n//     getQuestions(token).then(res => {\r\n//       setQuestions(res.data);\r\n//       setAnswers(Array(res.data.length).fill(null));\r\n//     }).catch(err => console.error(err));\r\n//   }, [token]);\r\n\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft, questions, submitted]);\r\n\r\n//   const handleOption = idx => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n//     const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\r\n//     submitExam(payload, token)\r\n//       .then(() => getResult(token))\r\n//       .then(r => {\r\n//         setSubmitted(true);\r\n//         setResult(r.data);\r\n//         window.location.hash = '#/results';\r\n//       })\r\n//       .catch(err => alert('Error submitting exam. Please try again.'));\r\n//   };\r\n\r\n//   if (!questions.length) return <div>Loading questions...</div>;\r\n\r\n//   if (submitted && result) return (\r\n//     <div>\r\n//       <h2>Exam Submitted</h2>\r\n//       <div>Score: {result.score} / {result.review.length}</div>\r\n//       <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//     </div>\r\n//   );\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div>Time Left: {minutes}:{seconds.toString().padStart(2,'0')}</div>\r\n//       <h3>Question {current+1} of {questions.length}</h3>\r\n//       <div>{q.question}</div>\r\n//       <ul>\r\n//         {q.options.map((opt, i) => (\r\n//           <li key={i} onClick={() => handleOption(i)} style={{ fontWeight: answers[current] === i ? 'bold' : 'normal' }}>\r\n//             {String.fromCharCode(65+i)}. {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <div>\r\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\r\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";   // âœ… Add this line\r\nimport { getQuestions, submitExam, getResult } from \"./api\";\r\nimport \"./Exam.css\";\r\n\r\nfunction Exam({ token }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [current, setCurrent] = useState(0);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [result, setResult] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n  const shuffleArray = (arr) => {\r\n    let newArr = [...arr];\r\n    for (let i = newArr.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n    }\r\n    return newArr;\r\n  };\r\n\r\n  // Load state or fetch\r\n  useEffect(() => {\r\n    const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n    const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n    const storedCurrent = localStorage.getItem(\"exam_current\");\r\n    const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n    if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n      setQuestions(JSON.parse(storedQuestions));\r\n      setAnswers(JSON.parse(storedAnswers));\r\n      setCurrent(parseInt(storedCurrent, 10));\r\n      setTimeLeft(parseInt(storedTimeLeft, 10));\r\n    } else {\r\n      getQuestions(token).then((res) => {\r\n        const shuffled = shuffleArray(res.data);\r\n        setQuestions(shuffled);\r\n        setAnswers(Array(shuffled.length).fill(null));\r\n        localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n        localStorage.setItem(\"exam_answers\", JSON.stringify(Array(shuffled.length).fill(null)));\r\n        localStorage.setItem(\"exam_current\", 0);\r\n        localStorage.setItem(\"exam_timeLeft\", 30 * 60);\r\n      });\r\n    }\r\n  }, [token]);\r\n\r\n  // Save progress\r\n  useEffect(() => {\r\n    if (questions.length && !submitted) {\r\n      localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n      localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n      localStorage.setItem(\"exam_current\", current);\r\n      localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n    }\r\n  }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n  // Timer\r\n  useEffect(() => {\r\n    if (!questions.length || submitted) return;\r\n    if (timeLeft <= 0) {\r\n      handleSubmit();\r\n      return;\r\n    }\r\n    const timer = setTimeout(() => {\r\n      setTimeLeft((t) => {\r\n        localStorage.setItem(\"exam_timeLeft\", t - 1);\r\n        return t - 1;\r\n      });\r\n    }, 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [questions.length, submitted, timeLeft]);\r\n\r\n  const handleOption = (idx) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[current] = idx;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (submitted) return;\r\n    const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\r\n\r\n    submitExam(payload, token)\r\n      .then(() => {\r\n        setSubmitted(true);\r\n        localStorage.removeItem(\"exam_questions\");\r\n        localStorage.removeItem(\"exam_answers\");\r\n        localStorage.removeItem(\"exam_current\");\r\n        localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n        getResult(token).then((r) => {\r\n          setResult(r.data);\r\n          window.location.hash = \"#/results\";\r\n        });\r\n      })\r\n      .catch(() => alert(\"Error submitting exam. Please try again.\"));\r\n  };\r\n\r\n  if (!questions.length && !submitted) return <div className=\"exam-container\">Loading questions...</div>;\r\n  if (submitted && result)\r\n    return (\r\n      <div className=\"exam-container\">\r\n        <h2>Exam Submitted</h2>\r\n        <div>\r\n          Score: {result.score} / {result.review.length}\r\n        </div>\r\n        <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\r\n      </div>\r\n    );\r\n\r\n  const q = questions[current];\r\n  const minutes = Math.floor(timeLeft / 60);\r\n  const seconds = timeLeft % 60;\r\n\r\n  return (\r\n    <div className=\"exam-container\">\r\n      <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\r\n        Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\r\n      </div>\r\n      <h3>\r\n        Question {current + 1} of {questions.length}\r\n      </h3>\r\n      <div>{q.question}</div>\r\n      <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n        {q.options.map((opt, idx) => (\r\n          <li\r\n            key={idx}\r\n            onClick={() => handleOption(idx)}\r\n            style={{\r\n              padding: \"8px\",\r\n              margin: \"6px 0\",\r\n              border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\r\n              borderRadius: 6,\r\n              backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          >\r\n            {String.fromCharCode(65 + idx)}. {opt}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\r\n        <button disabled={current === 0} onClick={() => setCurrent((c) => c - 1)}>\r\n          Previous\r\n        </button>\r\n        <button disabled={current === questions.length - 1} onClick={() => setCurrent((c) => c + 1)}>\r\n          Next\r\n        </button>\r\n        <button onClick={handleSubmit}>Submit Exam</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Exam;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}