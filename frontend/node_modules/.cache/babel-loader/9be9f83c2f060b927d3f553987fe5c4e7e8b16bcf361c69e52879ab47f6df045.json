{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sridh\\\\Desktop\\\\new-exam-builder-ace-main\\\\frontend\\\\src\\\\Exam.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n// // import \"./Exam.css\";\n// // import { getQuestions, submitExam, getResult } from './api';\n\n// // function Exam({ token }) {\n// //   const [questions, setQuestions] = useState([]);\n// //   const [answers, setAnswers] = useState([]);\n// //   const [current, setCurrent] = useState(0);\n// //   const [submitted, setSubmitted] = useState(false);\n// //   const [result, setResult] = useState(null);\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n// //   // Utility: Shuffle array\n// //   const shuffleArray = (arr) => {\n// //     let newArr = [...arr];\n// //     for (let i = newArr.length - 1; i > 0; i--) {\n// //       const j = Math.floor(Math.random() * (i + 1));\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n// //     }\n// //     return newArr;\n// //   };\n\n// //   // Load exam state or fetch new questions\n// //   useEffect(() => {\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n// //     getResult(token)\n// //       .then(r => {\n// //         if (r.data && r.data.review) {\n// //           // Already submitted\n// //           setSubmitted(true);\n// //           setResult(r.data);\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           // Resume ongoing exam\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           // Start new exam with shuffled questions\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       })\n// //       .catch(() => {\n// //         // Offline or API error â€” fallback to stored state\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n// //           setQuestions(JSON.parse(storedQuestions));\n// //           setAnswers(JSON.parse(storedAnswers));\n// //           setCurrent(parseInt(storedCurrent, 10));\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\n// //         } else {\n// //           getQuestions(token).then(res => {\n// //             const shuffled = shuffleArray(res.data);\n// //             setQuestions(shuffled);\n// //             setAnswers(Array(shuffled.length).fill(null));\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n// //           });\n// //         }\n// //       });\n// //   }, [token]);\n\n// //   // Save progress\n// //   useEffect(() => {\n// //     if (questions.length && !submitted) {\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n// //       localStorage.setItem(\"exam_current\", current);\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n// //     }\n// //   }, [questions, answers, current, timeLeft, submitted]);\n\n// //   // Countdown timer\n// //   useEffect(() => {\n// //     if (!questions.length || submitted) return;\n// //     if (timeLeft <= 0) {\n// //       handleSubmit();\n// //       return;\n// //     }\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n// //     return () => clearTimeout(timer);\n// //   }, [questions.length, submitted, timeLeft]);\n\n// //   const handleOption = (idx) => {\n// //     const newAnswers = [...answers];\n// //     newAnswers[current] = idx;\n// //     setAnswers(newAnswers);\n// //   };\n\n// //   const handleSubmit = () => {\n// //     if (submitted) return;\n\n// //     const payload = questions.map((q, i) => ({\n// //       questionId: q._id,\n// //       selectedOption: answers[i]\n// //     }));\n\n// //     submitExam(payload, token).then(() => {\n// //       setSubmitted(true);\n// //       // Clear saved progress\n// //       localStorage.removeItem(\"exam_questions\");\n// //       localStorage.removeItem(\"exam_answers\");\n// //       localStorage.removeItem(\"exam_current\");\n// //       localStorage.removeItem(\"exam_timeLeft\");\n\n// //       getResult(token).then(r => {\n// //         setResult(r.data);\n// //         window.location.hash = '#/results';\n// //       });\n// //     });\n// //   };\n\n// //   if (!questions.length && !submitted) {\n// //     return (\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n// //         <h2>Loading questions...</h2>\n// //       </div>\n// //     );\n// //   }\n\n// //   if (submitted && result) {\n// //     return (\n// //       <div className=\"result-container card\">\n// //         <h2>Exam Submitted</h2>\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\n// //         </div>\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n// //       </div>\n// //     );\n// //   }\n\n// //   const q = questions[current];\n// //   const minutes = Math.floor(timeLeft / 60);\n// //   const seconds = timeLeft % 60;\n\n// //   return (\n// //     <div className=\"exam-container\">\n// //       <div\n// //         className=\"exam-timer\"\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n// //       >\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n// //       </div>\n\n// //       <h3>Question {current + 1} of {questions.length}</h3>\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\n// //         {q.options.map((opt, idx) => (\n// //           <li\n// //             key={idx}\n// //             style={{\n// //               padding: '8px 12px',\n// //               margin: '6px 0',\n// //               border: '2px solid',\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n// //               borderRadius: 6,\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n// //               cursor: 'pointer',\n// //               fontWeight: answers[current] === idx ? 600 : 400\n// //             }}\n// //             onClick={() => handleOption(idx)}\n// //           >\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n// //               {String.fromCharCode(65 + idx)}.\n// //             </span>\n// //             {opt}\n// //           </li>\n// //         ))}\n// //       </ul>\n\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n// //         <button onClick={handleSubmit}>Submit Exam</button>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./Exam.css\";\n// import { getQuestions, submitExam, getResult } from './api';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n//   const shuffleArray = (arr) => {\n//     let newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load questions on start\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//       // Resume ongoing exam\n//       setQuestions(JSON.parse(storedQuestions));\n//       setAnswers(JSON.parse(storedAnswers));\n//       setCurrent(parseInt(storedCurrent, 10));\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\n//     } else {\n//       // Fetch new questions\n//       getQuestions(token).then(res => {\n//         const shuffled = shuffleArray(res.data);\n//         setQuestions(shuffled);\n//         setAnswers(Array(shuffled.length).fill(null));\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//       });\n//     }\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id,\n//       selectedOption: answers[i]\n//     }));\n\n//     submitExam(payload, token).then(() => {\n//       setSubmitted(true);\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       // Fetch final result\n//       getResult(token).then(r => {\n//         setResult(r.data);\n//         window.location.hash = '#/results';\n//       });\n//     });\n//   };\n\n//   if (!questions.length && !submitted) {\n//     return (\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\n//         <h2>Loading questions...</h2>\n//       </div>\n//     );\n//   }\n\n//   if (submitted && result) {\n//     return (\n//       <div className=\"result-container card\">\n//         <h2>Exam Submitted</h2>\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n//           <strong>Score:</strong> {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//       </div>\n//     );\n//   }\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div\n//         className=\"exam-timer\"\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\n//       >\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\n//       </div>\n\n//       <h3>Question {current + 1} of {questions.length}</h3>\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             style={{\n//               padding: '8px 12px',\n//               margin: '6px 0',\n//               border: '2px solid',\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n//               cursor: 'pointer',\n//               fontWeight: answers[current] === idx ? 600 : 400\n//             }}\n//             onClick={() => handleOption(idx)}\n//           >\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\n//               {String.fromCharCode(65 + idx)}.\n//             </span>\n//             {opt}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from 'react';\n// import \"./Exam.css\";\n// import { getQuestions, submitExam, getResult } from './api';\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\n\n//   // Shuffle questions\n//   const shuffleArray = (arr) => {\n//     const newArr = [...arr];\n//     for (let i = newArr.length - 1; i > 0; i--) {\n//       const j = Math.floor(Math.random() * (i + 1));\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n//     }\n//     return newArr;\n//   };\n\n//   // Load questions or resume\n//   useEffect(() => {\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n//     getResult(token)\n//       .then(res => {\n//         if (res.data && res.data.review) {\n//           setSubmitted(true);\n//           setResult(res.data);\n//         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//           setQuestions(JSON.parse(storedQuestions));\n//           setAnswers(JSON.parse(storedAnswers));\n//           setCurrent(parseInt(storedCurrent, 10));\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\n//         } else {\n//           getQuestions(token).then(res => {\n//             const shuffled = shuffleArray(res.data);\n//             setQuestions(shuffled);\n//             setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\n//             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n//           }).catch(err => console.error(\"Error fetching questions:\", err));\n//         }\n//       })\n//       .catch(err => {\n//         // fallback\n//         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\n//           setQuestions(JSON.parse(storedQuestions));\n//           setAnswers(JSON.parse(storedAnswers));\n//           setCurrent(parseInt(storedCurrent, 10));\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\n//         }\n//       });\n//   }, [token]);\n\n//   // Save progress\n//   useEffect(() => {\n//     if (questions.length && !submitted) {\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//       localStorage.setItem(\"exam_current\", current);\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//     }\n//   }, [questions, answers, current, timeLeft, submitted]);\n\n//   // Countdown\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [questions.length, submitted, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//     if (submitted) return;\n\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id || q.id,\n//       selectedOption: answers[i] // can be undefined\n//     }));\n\n//     console.log(\"Submitting payload:\", payload); // debug\n\n//     submitExam(payload, token)\n//       .then(() => {\n//         setSubmitted(true);\n//         localStorage.removeItem(\"exam_questions\");\n//         localStorage.removeItem(\"exam_answers\");\n//         localStorage.removeItem(\"exam_current\");\n//         localStorage.removeItem(\"exam_timeLeft\");\n\n//         getResult(token).then(r => {\n//           setResult(r.data);\n//           window.location.hash = '#/results';\n//         });\n//       })\n//       .catch(err => {\n//         console.error(\"Error submitting exam:\", err.response?.data || err.message);\n//         alert(\"Error submitting exam. Please try again.\");\n//       });\n//   };\n\n//   if (!questions.length && !submitted) {\n//     return <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>Loading questions...</div>;\n//   }\n\n//   if (submitted && result) {\n//     return (\n//       <div className=\"result-container card\">\n//         <h2>Exam Submitted</h2>\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\n//           <strong>Score:</strong> {result.score} / {result.review.length}\n//         </div>\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\n//       </div>\n//     );\n//   }\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div className=\"exam-timer\" style={{ textAlign: 'right', fontWeight: 600, color: '#d32f2f', marginBottom: 16, fontSize: '1.3em' }}>\n//         Time Left: {minutes.toString().padStart(2,'0')}:{seconds.toString().padStart(2,'0')}\n//       </div>\n\n//       <h3>Question {current + 1} of {questions.length}</h3>\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\n\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li key={idx} style={{\n//             padding: '8px 12px',\n//             margin: '6px 0',\n//             border: '2px solid',\n//             borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\n//             borderRadius: 6,\n//             backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\n//             cursor: 'pointer',\n//             fontWeight: answers[current] === idx ? 600 : 400\n//           }}\n//           onClick={() => handleOption(idx)}>\n//             <span style={{ fontWeight:'bold', marginRight:6 }}>{String.fromCharCode(65+idx)}.</span>\n//             {opt}\n//           </li>\n//         ))}\n//       </ul>\n\n//       <div style={{ display:'flex', gap:'16px', marginTop:'18px' }}>\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\nimport React, { useState, useEffect } from 'react';\nimport \"./Exam.css\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Exam({\n  token\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [current, setCurrent] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const [result, setResult] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(30 * 60);\n  const shuffleArray = arr => {\n    let newArr = [...arr];\n    for (let i = newArr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n    }\n    return newArr;\n  };\n\n  // Load questions or resume\n  useEffect(() => {\n    const storedQuestions = localStorage.getItem(\"exam_questions\");\n    const storedAnswers = localStorage.getItem(\"exam_answers\");\n    const storedCurrent = localStorage.getItem(\"exam_current\");\n    const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\n\n    // Check if exam already submitted\n    axios.get(\"http://localhost:5000/api/exam/result\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      var _res$data$review;\n      if (res.data && (_res$data$review = res.data.review) !== null && _res$data$review !== void 0 && _res$data$review.length) {\n        setSubmitted(true);\n        setResult(res.data);\n      } else if (storedQuestions) {\n        setQuestions(JSON.parse(storedQuestions));\n        setAnswers(JSON.parse(storedAnswers));\n        setCurrent(parseInt(storedCurrent, 10));\n        setTimeLeft(parseInt(storedTimeLeft, 10));\n      } else {\n        axios.get(\"http://localhost:5000/api/exam/questions\", {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        }).then(r => {\n          const shuffled = shuffleArray(r.data);\n          setQuestions(shuffled);\n          setAnswers(Array(shuffled.length).fill(null));\n          localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\n        }).catch(console.error);\n      }\n    }).catch(console.error);\n  }, [token]);\n\n  // Save progress\n  useEffect(() => {\n    if (questions.length && !submitted) {\n      localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\n      localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n      localStorage.setItem(\"exam_current\", current);\n      localStorage.setItem(\"exam_timeLeft\", timeLeft);\n    }\n  }, [questions, answers, current, timeLeft, submitted]);\n\n  // Timer\n  useEffect(() => {\n    if (!questions.length || submitted) return;\n    if (timeLeft <= 0) handleSubmit();\n    const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\n    return () => clearTimeout(timer);\n  }, [questions.length, submitted, timeLeft]);\n  const handleOption = idx => {\n    const newAnswers = [...answers];\n    newAnswers[current] = idx;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = () => {\n    if (submitted) return;\n    const payload = questions.map((q, i) => ({\n      questionId: q._id,\n      selectedOption: answers[i]\n    }));\n    axios.post(\"http://localhost:5000/api/exam/submit\", {\n      answers: payload\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(r => {\n      setSubmitted(true);\n      localStorage.removeItem(\"exam_questions\");\n      localStorage.removeItem(\"exam_answers\");\n      localStorage.removeItem(\"exam_current\");\n      localStorage.removeItem(\"exam_timeLeft\");\n      setResult(r.data);\n      window.location.hash = \"#/results\";\n    }).catch(err => {\n      var _err$response, _err$response$data;\n      return alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Error submitting exam\");\n    });\n  };\n  if (!questions.length && !submitted) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 627,\n    columnNumber: 47\n  }, this);\n  if (submitted && result) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exam-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Exam Submitted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", result.score, \" / \", result.review.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.hash = \"#/dashboard\",\n        children: \"Return to Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 7\n    }, this);\n  }\n  const q = questions[current];\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Time Left: \", minutes, \":\", seconds.toString().padStart(2, '0')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Question \", current + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: q.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: q.options.map((opt, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          border: answers[current] === i ? \"2px solid blue\" : \"1px solid #ccc\"\n        },\n        onClick: () => handleOption(i),\n        children: [String.fromCharCode(65 + i), \". \", opt]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === 0,\n        onClick: () => setCurrent(c => c - 1),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === questions.length - 1,\n        onClick: () => setCurrent(c => c + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Exam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 656,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 644,\n    columnNumber: 5\n  }, this);\n}\n_s(Exam, \"LVcM3/jyynNiWHDKURDdjk1DzKQ=\");\n_c = Exam;\nexport default Exam;\nvar _c;\n$RefreshReg$(_c, \"Exam\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Exam","token","_s","questions","setQuestions","answers","setAnswers","current","setCurrent","submitted","setSubmitted","result","setResult","timeLeft","setTimeLeft","shuffleArray","arr","newArr","i","length","j","Math","floor","random","storedQuestions","localStorage","getItem","storedAnswers","storedCurrent","storedTimeLeft","get","headers","Authorization","then","res","_res$data$review","data","review","JSON","parse","parseInt","r","shuffled","Array","fill","setItem","stringify","catch","console","error","handleSubmit","timer","setTimeout","t","clearTimeout","handleOption","idx","newAnswers","payload","map","q","questionId","_id","selectedOption","post","removeItem","window","location","hash","err","_err$response","_err$response$data","alert","response","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","score","onClick","minutes","seconds","toString","padStart","question","options","opt","style","border","String","fromCharCode","disabled","c","_c","$RefreshReg$"],"sources":["C:/Users/Sridh/Desktop/new-exam-builder-ace-main/frontend/src/Exam.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import \"./Exam.css\";\r\n// // import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// // function Exam({ token }) {\r\n// //   const [questions, setQuestions] = useState([]);\r\n// //   const [answers, setAnswers] = useState([]);\r\n// //   const [current, setCurrent] = useState(0);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n// //   const [result, setResult] = useState(null);\r\n// //   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n// //   // Utility: Shuffle array\r\n// //   const shuffleArray = (arr) => {\r\n// //     let newArr = [...arr];\r\n// //     for (let i = newArr.length - 1; i > 0; i--) {\r\n// //       const j = Math.floor(Math.random() * (i + 1));\r\n// //       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n// //     }\r\n// //     return newArr;\r\n// //   };\r\n\r\n// //   // Load exam state or fetch new questions\r\n// //   useEffect(() => {\r\n// //     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n// //     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n// //     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n// //     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n// //     getResult(token)\r\n// //       .then(r => {\r\n// //         if (r.data && r.data.review) {\r\n// //           // Already submitted\r\n// //           setSubmitted(true);\r\n// //           setResult(r.data);\r\n// //         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           // Resume ongoing exam\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           // Start new exam with shuffled questions\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       })\r\n// //       .catch(() => {\r\n// //         // Offline or API error â€” fallback to stored state\r\n// //         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n// //           setQuestions(JSON.parse(storedQuestions));\r\n// //           setAnswers(JSON.parse(storedAnswers));\r\n// //           setCurrent(parseInt(storedCurrent, 10));\r\n// //           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n// //         } else {\r\n// //           getQuestions(token).then(res => {\r\n// //             const shuffled = shuffleArray(res.data);\r\n// //             setQuestions(shuffled);\r\n// //             setAnswers(Array(shuffled.length).fill(null));\r\n// //             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n// //           });\r\n// //         }\r\n// //       });\r\n// //   }, [token]);\r\n\r\n// //   // Save progress\r\n// //   useEffect(() => {\r\n// //     if (questions.length && !submitted) {\r\n// //       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n// //       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n// //       localStorage.setItem(\"exam_current\", current);\r\n// //       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n// //     }\r\n// //   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n// //   // Countdown timer\r\n// //   useEffect(() => {\r\n// //     if (!questions.length || submitted) return;\r\n// //     if (timeLeft <= 0) {\r\n// //       handleSubmit();\r\n// //       return;\r\n// //     }\r\n// //     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n// //     return () => clearTimeout(timer);\r\n// //   }, [questions.length, submitted, timeLeft]);\r\n\r\n// //   const handleOption = (idx) => {\r\n// //     const newAnswers = [...answers];\r\n// //     newAnswers[current] = idx;\r\n// //     setAnswers(newAnswers);\r\n// //   };\r\n\r\n// //   const handleSubmit = () => {\r\n// //     if (submitted) return;\r\n\r\n// //     const payload = questions.map((q, i) => ({\r\n// //       questionId: q._id,\r\n// //       selectedOption: answers[i]\r\n// //     }));\r\n\r\n// //     submitExam(payload, token).then(() => {\r\n// //       setSubmitted(true);\r\n// //       // Clear saved progress\r\n// //       localStorage.removeItem(\"exam_questions\");\r\n// //       localStorage.removeItem(\"exam_answers\");\r\n// //       localStorage.removeItem(\"exam_current\");\r\n// //       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n// //       getResult(token).then(r => {\r\n// //         setResult(r.data);\r\n// //         window.location.hash = '#/results';\r\n// //       });\r\n// //     });\r\n// //   };\r\n\r\n// //   if (!questions.length && !submitted) {\r\n// //     return (\r\n// //       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n// //         <h2>Loading questions...</h2>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   if (submitted && result) {\r\n// //     return (\r\n// //       <div className=\"result-container card\">\r\n// //         <h2>Exam Submitted</h2>\r\n// //         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n// //           <strong>Score:</strong> {result.score} / {result.review.length}\r\n// //         </div>\r\n// //         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n// //       </div>\r\n// //     );\r\n// //   }\r\n\r\n// //   const q = questions[current];\r\n// //   const minutes = Math.floor(timeLeft / 60);\r\n// //   const seconds = timeLeft % 60;\r\n\r\n// //   return (\r\n// //     <div className=\"exam-container\">\r\n// //       <div\r\n// //         className=\"exam-timer\"\r\n// //         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n// //       >\r\n// //         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n// //       </div>\r\n\r\n// //       <h3>Question {current + 1} of {questions.length}</h3>\r\n// //       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n// //       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n// //         {q.options.map((opt, idx) => (\r\n// //           <li\r\n// //             key={idx}\r\n// //             style={{\r\n// //               padding: '8px 12px',\r\n// //               margin: '6px 0',\r\n// //               border: '2px solid',\r\n// //               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n// //               borderRadius: 6,\r\n// //               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n// //               cursor: 'pointer',\r\n// //               fontWeight: answers[current] === idx ? 600 : 400\r\n// //             }}\r\n// //             onClick={() => handleOption(idx)}\r\n// //           >\r\n// //             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n// //               {String.fromCharCode(65 + idx)}.\r\n// //             </span>\r\n// //             {opt}\r\n// //           </li>\r\n// //         ))}\r\n// //       </ul>\r\n\r\n// //       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n// //         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n// //         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n// //         <button onClick={handleSubmit}>Submit Exam</button>\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./Exam.css\";\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n//   const shuffleArray = (arr) => {\r\n//     let newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load questions on start\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//       // Resume ongoing exam\r\n//       setQuestions(JSON.parse(storedQuestions));\r\n//       setAnswers(JSON.parse(storedAnswers));\r\n//       setCurrent(parseInt(storedCurrent, 10));\r\n//       setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//     } else {\r\n//       // Fetch new questions\r\n//       getQuestions(token).then(res => {\r\n//         const shuffled = shuffleArray(res.data);\r\n//         setQuestions(shuffled);\r\n//         setAnswers(Array(shuffled.length).fill(null));\r\n//         localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//       });\r\n//     }\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id,\r\n//       selectedOption: answers[i]\r\n//     }));\r\n\r\n//     submitExam(payload, token).then(() => {\r\n//       setSubmitted(true);\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       // Fetch final result\r\n//       getResult(token).then(r => {\r\n//         setResult(r.data);\r\n//         window.location.hash = '#/results';\r\n//       });\r\n//     });\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) {\r\n//     return (\r\n//       <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>\r\n//         <h2>Loading questions...</h2>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (submitted && result) {\r\n//     return (\r\n//       <div className=\"result-container card\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n//           <strong>Score:</strong> {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div\r\n//         className=\"exam-timer\"\r\n//         style={{ textAlign: 'right', fontWeight: '600', color: '#d32f2f', marginBottom: '16px', fontSize: '1.3em' }}\r\n//       >\r\n//         Time Left: {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}\r\n//       </div>\r\n\r\n//       <h3>Question {current + 1} of {questions.length}</h3>\r\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             style={{\r\n//               padding: '8px 12px',\r\n//               margin: '6px 0',\r\n//               border: '2px solid',\r\n//               borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n//               cursor: 'pointer',\r\n//               fontWeight: answers[current] === idx ? 600 : 400\r\n//             }}\r\n//             onClick={() => handleOption(idx)}\r\n//           >\r\n//             <span style={{ fontWeight: 'bold', marginRight: 6 }}>\r\n//               {String.fromCharCode(65 + idx)}.\r\n//             </span>\r\n//             {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       <div style={{ display: 'flex', gap: '16px', marginTop: '18px' }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(c => c - 1)}>Previous</button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(c => c + 1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import \"./Exam.css\";\r\n// import { getQuestions, submitExam, getResult } from './api';\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60); // 30 minutes\r\n\r\n//   // Shuffle questions\r\n//   const shuffleArray = (arr) => {\r\n//     const newArr = [...arr];\r\n//     for (let i = newArr.length - 1; i > 0; i--) {\r\n//       const j = Math.floor(Math.random() * (i + 1));\r\n//       [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n//     }\r\n//     return newArr;\r\n//   };\r\n\r\n//   // Load questions or resume\r\n//   useEffect(() => {\r\n//     const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n//     const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n//     const storedCurrent = localStorage.getItem(\"exam_current\");\r\n//     const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n//     getResult(token)\r\n//       .then(res => {\r\n//         if (res.data && res.data.review) {\r\n//           setSubmitted(true);\r\n//           setResult(res.data);\r\n//         } else if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//           setQuestions(JSON.parse(storedQuestions));\r\n//           setAnswers(JSON.parse(storedAnswers));\r\n//           setCurrent(parseInt(storedCurrent, 10));\r\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//         } else {\r\n//           getQuestions(token).then(res => {\r\n//             const shuffled = shuffleArray(res.data);\r\n//             setQuestions(shuffled);\r\n//             setAnswers(Array(shuffled.length).fill(undefined)); // undefined for unattempted\r\n//             localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n//           }).catch(err => console.error(\"Error fetching questions:\", err));\r\n//         }\r\n//       })\r\n//       .catch(err => {\r\n//         // fallback\r\n//         if (storedQuestions && storedAnswers && storedCurrent && storedTimeLeft) {\r\n//           setQuestions(JSON.parse(storedQuestions));\r\n//           setAnswers(JSON.parse(storedAnswers));\r\n//           setCurrent(parseInt(storedCurrent, 10));\r\n//           setTimeLeft(parseInt(storedTimeLeft, 10));\r\n//         }\r\n//       });\r\n//   }, [token]);\r\n\r\n//   // Save progress\r\n//   useEffect(() => {\r\n//     if (questions.length && !submitted) {\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//       localStorage.setItem(\"exam_current\", current);\r\n//       localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//     }\r\n//   }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n//   // Countdown\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [questions.length, submitted, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//     if (submitted) return;\r\n\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id || q.id,\r\n//       selectedOption: answers[i] // can be undefined\r\n//     }));\r\n\r\n//     console.log(\"Submitting payload:\", payload); // debug\r\n\r\n//     submitExam(payload, token)\r\n//       .then(() => {\r\n//         setSubmitted(true);\r\n//         localStorage.removeItem(\"exam_questions\");\r\n//         localStorage.removeItem(\"exam_answers\");\r\n//         localStorage.removeItem(\"exam_current\");\r\n//         localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//         getResult(token).then(r => {\r\n//           setResult(r.data);\r\n//           window.location.hash = '#/results';\r\n//         });\r\n//       })\r\n//       .catch(err => {\r\n//         console.error(\"Error submitting exam:\", err.response?.data || err.message);\r\n//         alert(\"Error submitting exam. Please try again.\");\r\n//       });\r\n//   };\r\n\r\n//   if (!questions.length && !submitted) {\r\n//     return <div className=\"exam-container\" style={{ textAlign: 'center', padding: '60px 0' }}>Loading questions...</div>;\r\n//   }\r\n\r\n//   if (submitted && result) {\r\n//     return (\r\n//       <div className=\"result-container card\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div style={{ fontSize: '1.2em', margin: '12px 0' }}>\r\n//           <strong>Score:</strong> {result.score} / {result.review.length}\r\n//         </div>\r\n//         <button onClick={() => window.location.hash = '#/dashboard'}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div className=\"exam-timer\" style={{ textAlign: 'right', fontWeight: 600, color: '#d32f2f', marginBottom: 16, fontSize: '1.3em' }}>\r\n//         Time Left: {minutes.toString().padStart(2,'0')}:{seconds.toString().padStart(2,'0')}\r\n//       </div>\r\n\r\n//       <h3>Question {current + 1} of {questions.length}</h3>\r\n//       <div className=\"question\" style={{ marginBottom: 16 }}>{q.question}</div>\r\n\r\n//       <ul style={{ listStyle: 'none', padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li key={idx} style={{\r\n//             padding: '8px 12px',\r\n//             margin: '6px 0',\r\n//             border: '2px solid',\r\n//             borderColor: answers[current] === idx ? '#1976d2' : '#ccc',\r\n//             borderRadius: 6,\r\n//             backgroundColor: answers[current] === idx ? '#e3f2fd' : '#fff',\r\n//             cursor: 'pointer',\r\n//             fontWeight: answers[current] === idx ? 600 : 400\r\n//           }}\r\n//           onClick={() => handleOption(idx)}>\r\n//             <span style={{ fontWeight:'bold', marginRight:6 }}>{String.fromCharCode(65+idx)}.</span>\r\n//             {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n\r\n//       <div style={{ display:'flex', gap:'16px', marginTop:'18px' }}>\r\n//         <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\r\n//         <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport \"./Exam.css\";\r\nimport axios from 'axios';\r\n\r\nfunction Exam({ token }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [current, setCurrent] = useState(0);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [result, setResult] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n  const shuffleArray = (arr) => {\r\n    let newArr = [...arr];\r\n    for (let i = newArr.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\r\n    }\r\n    return newArr;\r\n  };\r\n\r\n  // Load questions or resume\r\n  useEffect(() => {\r\n    const storedQuestions = localStorage.getItem(\"exam_questions\");\r\n    const storedAnswers = localStorage.getItem(\"exam_answers\");\r\n    const storedCurrent = localStorage.getItem(\"exam_current\");\r\n    const storedTimeLeft = localStorage.getItem(\"exam_timeLeft\");\r\n\r\n    // Check if exam already submitted\r\n    axios.get(\"http://localhost:5000/api/exam/result\", {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    }).then(res => {\r\n      if (res.data && res.data.review?.length) {\r\n        setSubmitted(true);\r\n        setResult(res.data);\r\n      } else if (storedQuestions) {\r\n        setQuestions(JSON.parse(storedQuestions));\r\n        setAnswers(JSON.parse(storedAnswers));\r\n        setCurrent(parseInt(storedCurrent, 10));\r\n        setTimeLeft(parseInt(storedTimeLeft, 10));\r\n      } else {\r\n        axios.get(\"http://localhost:5000/api/exam/questions\", {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        }).then(r => {\r\n          const shuffled = shuffleArray(r.data);\r\n          setQuestions(shuffled);\r\n          setAnswers(Array(shuffled.length).fill(null));\r\n          localStorage.setItem(\"exam_questions\", JSON.stringify(shuffled));\r\n        }).catch(console.error);\r\n      }\r\n    }).catch(console.error);\r\n  }, [token]);\r\n\r\n  // Save progress\r\n  useEffect(() => {\r\n    if (questions.length && !submitted) {\r\n      localStorage.setItem(\"exam_questions\", JSON.stringify(questions));\r\n      localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n      localStorage.setItem(\"exam_current\", current);\r\n      localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n    }\r\n  }, [questions, answers, current, timeLeft, submitted]);\r\n\r\n  // Timer\r\n  useEffect(() => {\r\n    if (!questions.length || submitted) return;\r\n    if (timeLeft <= 0) handleSubmit();\r\n    const timer = setTimeout(() => setTimeLeft(t => t - 1), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [questions.length, submitted, timeLeft]);\r\n\r\n  const handleOption = (idx) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[current] = idx;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (submitted) return;\r\n    const payload = questions.map((q, i) => ({ questionId: q._id, selectedOption: answers[i] }));\r\n    axios.post(\"http://localhost:5000/api/exam/submit\", { answers: payload }, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    }).then(r => {\r\n      setSubmitted(true);\r\n      localStorage.removeItem(\"exam_questions\");\r\n      localStorage.removeItem(\"exam_answers\");\r\n      localStorage.removeItem(\"exam_current\");\r\n      localStorage.removeItem(\"exam_timeLeft\");\r\n      setResult(r.data);\r\n      window.location.hash = \"#/results\";\r\n    }).catch(err => alert(err.response?.data?.message || \"Error submitting exam\"));\r\n  };\r\n\r\n  if (!questions.length && !submitted) return <div className=\"exam-container\">Loading questions...</div>;\r\n\r\n  if (submitted && result) {\r\n    return (\r\n      <div className=\"exam-container\">\r\n        <h2>Exam Submitted</h2>\r\n        <div>Score: {result.score} / {result.review.length}</div>\r\n        <button onClick={() => window.location.hash = \"#/dashboard\"}>Return to Dashboard</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const q = questions[current];\r\n  const minutes = Math.floor(timeLeft / 60);\r\n  const seconds = timeLeft % 60;\r\n\r\n  return (\r\n    <div className=\"exam-container\">\r\n      <div>Time Left: {minutes}:{seconds.toString().padStart(2, '0')}</div>\r\n      <h3>Question {current + 1} of {questions.length}</h3>\r\n      <div>{q.question}</div>\r\n      <ul>\r\n        {q.options.map((opt, i) => (\r\n          <li key={i} style={{ border: answers[current] === i ? \"2px solid blue\" : \"1px solid #ccc\" }}\r\n              onClick={() => handleOption(i)}>\r\n            {String.fromCharCode(65 + i)}. {opt}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div>\r\n        <button disabled={current===0} onClick={()=>setCurrent(c=>c-1)}>Previous</button>\r\n        <button disabled={current===questions.length-1} onClick={()=>setCurrent(c=>c+1)}>Next</button>\r\n        <button onClick={handleSubmit}>Submit Exam</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Exam;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}