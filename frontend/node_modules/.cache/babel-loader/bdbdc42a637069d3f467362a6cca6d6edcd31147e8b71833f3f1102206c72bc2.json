{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sridh\\\\Desktop\\\\new-exam-builder-ace-main\\\\frontend\\\\src\\\\Exam.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./Exam.css\";\n// // Before: import { getQuestions, submitExam, getResult } from \"./api\";\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n//   // Fetch questions from backend\n//   useEffect(() => {\n//     if (!token) return;\n\n//     axios\n//       .get(\"http://localhost:5000/api/exam/questions\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       })\n//       .then((res) => {\n//         setQuestions(res.data);\n//         setAnswers(Array(res.data.length).fill(null));\n//       })\n//       .catch((err) => console.error(\"Failed to fetch questions:\", err));\n//   }, [token]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft, questions.length, submitted]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//   if (submitted) return;\n\n//   const payload = questions.map((q, i) => ({\n//     questionId: q._id,\n//     selectedOption: answers[i],\n//   }));\n\n//   submitExam(payload, token)\n//     .then((res) => {\n//       setSubmitted(true);\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       // Fetch result immediately\n//       getResult(token)\n//         .then((r) => {\n//           setResult(r.data);\n//           window.location.hash = \"#/results\";\n//         })\n//         .catch((err) => console.error(err));\n//     })\n//     .catch((err) => {\n//       console.error(err);\n//       alert(err.response?.data?.message || \"Error submitting exam\");\n//     });\n// };\n\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\n\n//   if (submitted && result)\n//     return (\n//       <div className=\"exam-container\">\n//         <h2>Exam Submitted</h2>\n//         <div>\n//           Score: {result.score} / {result.answers.length}\n//         </div>\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>\n//           Return to Dashboard\n//         </button>\n//       </div>\n//     );\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\n//       </div>\n//       <h3>\n//         Question {current + 1} of {questions.length}\n//       </h3>\n//       <div>{q.question}</div>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             onClick={() => handleOption(idx)}\n//             style={{\n//               padding: \"8px\",\n//               margin: \"6px 0\",\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             {String.fromCharCode(65 + idx)}. {opt}\n//           </li>\n//         ))}\n//       </ul>\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>\n//           Previous\n//         </button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>\n//           Next\n//         </button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from \"react\";\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n//   // Load state from localStorage\n//   useEffect(() => {\n//     const savedQuestions = JSON.parse(localStorage.getItem(\"exam_questions\"));\n//     const savedAnswers = JSON.parse(localStorage.getItem(\"exam_answers\"));\n//     const savedCurrent = parseInt(localStorage.getItem(\"exam_current\"));\n//     const savedTime = parseInt(localStorage.getItem(\"exam_timeLeft\"));\n\n//     if (savedQuestions?.length) {\n//       setQuestions(savedQuestions);\n//       setAnswers(savedAnswers || Array(savedQuestions.length).fill(null));\n//       setCurrent(!isNaN(savedCurrent) ? savedCurrent : 0);\n//       setTimeLeft(!isNaN(savedTime) ? savedTime : 30 * 60);\n//     } else {\n//       // Fetch from backend\n//       fetchQuestions();\n//     }\n//   }, [token]);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const res = await getQuestions(token);\n//       setQuestions(res.data);\n//       setAnswers(Array(res.data.length).fill(null));\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(res.data));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(Array(res.data.length).fill(null)));\n//     } catch (err) {\n//       console.error(\"Failed to fetch questions:\", err);\n//     }\n//   };\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft, questions.length, submitted]);\n\n//   // Save state on changes\n//   useEffect(() => {\n//     localStorage.setItem(\"exam_current\", current);\n//     localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//     localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//   }, [current, answers, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = async () => {\n//     if (submitted) return;\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id,\n//       selectedOption: answers[i],\n//     }));\n\n//     try {\n//       await submitExam(payload, token);\n//       setSubmitted(true);\n\n//       // Clear localStorage\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       const r = await getResult(token);\n//       setResult(r.data);\n//       window.location.hash = \"#/results\";\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.message || \"Error submitting exam\");\n//     }\n//   };\n\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\n\n//   if (submitted && result)\n//     return (\n//       <div className=\"exam-container\">\n//         <h2>Exam Submitted</h2>\n//         <div>\n//           Score: {result.score} / {result.answers.length}\n//         </div>\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\n//       </div>\n//     );\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\n//       </div>\n//       <h3>\n//         Question {current + 1} of {questions.length}\n//       </h3>\n//       <div>{q.question}</div>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             onClick={() => handleOption(idx)}\n//             style={{\n//               padding: \"8px\",\n//               margin: \"6px 0\",\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             {String.fromCharCode(65 + idx)}. {opt}\n//           </li>\n//         ))}\n//       </ul>\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>Previous</button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\nimport React, { useState, useEffect } from \"react\";\nimport { getQuestions, submitExam, getResult } from \"./api.js\";\nimport \"Ea\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Exam({\n  token\n}) {\n  _s();\n  var _result$review;\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [current, setCurrent] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const [result, setResult] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n  // Load state from localStorage\n  useEffect(() => {\n    const savedQuestions = JSON.parse(localStorage.getItem(\"exam_questions\"));\n    const savedAnswers = JSON.parse(localStorage.getItem(\"exam_answers\"));\n    const savedCurrent = parseInt(localStorage.getItem(\"exam_current\"));\n    const savedTime = parseInt(localStorage.getItem(\"exam_timeLeft\"));\n    if (savedQuestions !== null && savedQuestions !== void 0 && savedQuestions.length) {\n      setQuestions(savedQuestions);\n      setAnswers(savedAnswers || Array(savedQuestions.length).fill(null));\n      setCurrent(!isNaN(savedCurrent) ? savedCurrent : 0);\n      setTimeLeft(!isNaN(savedTime) ? savedTime : 30 * 60);\n    } else {\n      fetchQuestions();\n    }\n  }, [token]);\n  const fetchQuestions = async () => {\n    try {\n      const res = await getQuestions(token);\n      setQuestions(res.data);\n      setAnswers(Array(res.data.length).fill(null));\n      localStorage.setItem(\"exam_questions\", JSON.stringify(res.data));\n      localStorage.setItem(\"exam_answers\", JSON.stringify(Array(res.data.length).fill(null)));\n    } catch (err) {\n      console.error(\"Failed to fetch questions:\", err);\n    }\n  };\n\n  // Timer\n  useEffect(() => {\n    if (!questions.length || submitted) return;\n    if (timeLeft <= 0) {\n      handleSubmit();\n      return;\n    }\n    const timer = setTimeout(() => setTimeLeft(prev => prev - 1), 1000);\n    return () => clearTimeout(timer);\n  }, [timeLeft, questions.length, submitted]);\n\n  // Save state on changes\n  useEffect(() => {\n    localStorage.setItem(\"exam_current\", current);\n    localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n    localStorage.setItem(\"exam_timeLeft\", timeLeft);\n  }, [current, answers, timeLeft]);\n  const handleOption = idx => {\n    const newAnswers = [...answers];\n    newAnswers[current] = idx;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = async () => {\n    if (submitted) return;\n    const payload = questions.map((q, i) => ({\n      questionId: q._id,\n      selectedOption: answers[i]\n    }));\n    try {\n      await submitExam(payload, token);\n      setSubmitted(true);\n\n      // Clear localStorage\n      localStorage.removeItem(\"exam_questions\");\n      localStorage.removeItem(\"exam_answers\");\n      localStorage.removeItem(\"exam_current\");\n      localStorage.removeItem(\"exam_timeLeft\");\n      const r = await getResult(token);\n      setResult(r.data);\n      window.location.href = \"/#/results\";\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(err);\n      alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Error submitting exam\");\n    }\n  };\n  if (!questions.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 33\n  }, this);\n  if (submitted && result) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Exam Submitted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", result.score, \" / \", ((_result$review = result.review) === null || _result$review === void 0 ? void 0 : _result$review.length) || 0]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => window.location.hash = \"#/dashboard\",\n      children: \"Return to Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 7\n  }, this);\n  const q = questions[current];\n  const minutes = Math.floor(timeLeft / 60);\n  const seconds = timeLeft % 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"right\",\n        color: \"#d32f2f\",\n        fontWeight: 600\n      },\n      children: [\"Time Left: \", minutes.toString().padStart(2, \"0\"), \":\", seconds.toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Question \", current + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: q.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyle: \"none\",\n        padding: 0\n      },\n      children: q.options.map((opt, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleOption(idx),\n        style: {\n          padding: \"8px\",\n          margin: \"6px 0\",\n          border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\n          borderRadius: 6,\n          backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\n          cursor: \"pointer\"\n        },\n        children: [String.fromCharCode(65 + idx), \". \", opt]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"12px\",\n        marginTop: \"16px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === 0,\n        onClick: () => setCurrent(current - 1),\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: current === questions.length - 1,\n        onClick: () => setCurrent(current + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit Exam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n}\n_s(Exam, \"LVcM3/jyynNiWHDKURDdjk1DzKQ=\");\n_c = Exam;\nexport default Exam;\nvar _c;\n$RefreshReg$(_c, \"Exam\");","map":{"version":3,"names":["React","useState","useEffect","getQuestions","submitExam","getResult","jsxDEV","_jsxDEV","Exam","token","_s","_result$review","questions","setQuestions","answers","setAnswers","current","setCurrent","submitted","setSubmitted","result","setResult","timeLeft","setTimeLeft","savedQuestions","JSON","parse","localStorage","getItem","savedAnswers","savedCurrent","parseInt","savedTime","length","Array","fill","isNaN","fetchQuestions","res","data","setItem","stringify","err","console","error","handleSubmit","timer","setTimeout","prev","clearTimeout","handleOption","idx","newAnswers","payload","map","q","i","questionId","_id","selectedOption","removeItem","r","window","location","href","_err$response","_err$response$data","alert","response","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","score","review","onClick","hash","minutes","Math","floor","seconds","style","textAlign","color","fontWeight","toString","padStart","question","listStyle","padding","options","opt","margin","border","borderRadius","backgroundColor","cursor","String","fromCharCode","display","gap","marginTop","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Sridh/Desktop/new-exam-builder-ace-main/frontend/src/Exam.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./Exam.css\";\r\n// // Before: import { getQuestions, submitExam, getResult } from \"./api\";\r\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n//   // Fetch questions from backend\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     axios\r\n//       .get(\"http://localhost:5000/api/exam/questions\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       })\r\n//       .then((res) => {\r\n//         setQuestions(res.data);\r\n//         setAnswers(Array(res.data.length).fill(null));\r\n//       })\r\n//       .catch((err) => console.error(\"Failed to fetch questions:\", err));\r\n//   }, [token]);\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft, questions.length, submitted]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//   if (submitted) return;\r\n\r\n//   const payload = questions.map((q, i) => ({\r\n//     questionId: q._id,\r\n//     selectedOption: answers[i],\r\n//   }));\r\n\r\n//   submitExam(payload, token)\r\n//     .then((res) => {\r\n//       setSubmitted(true);\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       // Fetch result immediately\r\n//       getResult(token)\r\n//         .then((r) => {\r\n//           setResult(r.data);\r\n//           window.location.hash = \"#/results\";\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     })\r\n//     .catch((err) => {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.message || \"Error submitting exam\");\r\n//     });\r\n// };\r\n\r\n\r\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\r\n\r\n//   if (submitted && result)\r\n//     return (\r\n//       <div className=\"exam-container\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div>\r\n//           Score: {result.score} / {result.answers.length}\r\n//         </div>\r\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>\r\n//           Return to Dashboard\r\n//         </button>\r\n//       </div>\r\n//     );\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\r\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\r\n//       </div>\r\n//       <h3>\r\n//         Question {current + 1} of {questions.length}\r\n//       </h3>\r\n//       <div>{q.question}</div>\r\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             onClick={() => handleOption(idx)}\r\n//             style={{\r\n//               padding: \"8px\",\r\n//               margin: \"6px 0\",\r\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             {String.fromCharCode(65 + idx)}. {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>\r\n//           Previous\r\n//         </button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>\r\n//           Next\r\n//         </button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n//   // Load state from localStorage\r\n//   useEffect(() => {\r\n//     const savedQuestions = JSON.parse(localStorage.getItem(\"exam_questions\"));\r\n//     const savedAnswers = JSON.parse(localStorage.getItem(\"exam_answers\"));\r\n//     const savedCurrent = parseInt(localStorage.getItem(\"exam_current\"));\r\n//     const savedTime = parseInt(localStorage.getItem(\"exam_timeLeft\"));\r\n\r\n//     if (savedQuestions?.length) {\r\n//       setQuestions(savedQuestions);\r\n//       setAnswers(savedAnswers || Array(savedQuestions.length).fill(null));\r\n//       setCurrent(!isNaN(savedCurrent) ? savedCurrent : 0);\r\n//       setTimeLeft(!isNaN(savedTime) ? savedTime : 30 * 60);\r\n//     } else {\r\n//       // Fetch from backend\r\n//       fetchQuestions();\r\n//     }\r\n//   }, [token]);\r\n\r\n//   const fetchQuestions = async () => {\r\n//     try {\r\n//       const res = await getQuestions(token);\r\n//       setQuestions(res.data);\r\n//       setAnswers(Array(res.data.length).fill(null));\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(res.data));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(Array(res.data.length).fill(null)));\r\n//     } catch (err) {\r\n//       console.error(\"Failed to fetch questions:\", err);\r\n//     }\r\n//   };\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft, questions.length, submitted]);\r\n\r\n//   // Save state on changes\r\n//   useEffect(() => {\r\n//     localStorage.setItem(\"exam_current\", current);\r\n//     localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//     localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//   }, [current, answers, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (submitted) return;\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id,\r\n//       selectedOption: answers[i],\r\n//     }));\r\n\r\n//     try {\r\n//       await submitExam(payload, token);\r\n//       setSubmitted(true);\r\n\r\n//       // Clear localStorage\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       const r = await getResult(token);\r\n//       setResult(r.data);\r\n//       window.location.hash = \"#/results\";\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.message || \"Error submitting exam\");\r\n//     }\r\n//   };\r\n\r\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\r\n\r\n//   if (submitted && result)\r\n//     return (\r\n//       <div className=\"exam-container\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div>\r\n//           Score: {result.score} / {result.answers.length}\r\n//         </div>\r\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\r\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\r\n//       </div>\r\n//       <h3>\r\n//         Question {current + 1} of {questions.length}\r\n//       </h3>\r\n//       <div>{q.question}</div>\r\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             onClick={() => handleOption(idx)}\r\n//             style={{\r\n//               padding: \"8px\",\r\n//               margin: \"6px 0\",\r\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             {String.fromCharCode(65 + idx)}. {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>Previous</button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { getQuestions, submitExam, getResult } from \"./api.js\";\r\nimport \"Ea\"\r\n\r\nfunction Exam({ token }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [current, setCurrent] = useState(0);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [result, setResult] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n  // Load state from localStorage\r\n  useEffect(() => {\r\n    const savedQuestions = JSON.parse(localStorage.getItem(\"exam_questions\"));\r\n    const savedAnswers = JSON.parse(localStorage.getItem(\"exam_answers\"));\r\n    const savedCurrent = parseInt(localStorage.getItem(\"exam_current\"));\r\n    const savedTime = parseInt(localStorage.getItem(\"exam_timeLeft\"));\r\n\r\n    if (savedQuestions?.length) {\r\n      setQuestions(savedQuestions);\r\n      setAnswers(savedAnswers || Array(savedQuestions.length).fill(null));\r\n      setCurrent(!isNaN(savedCurrent) ? savedCurrent : 0);\r\n      setTimeLeft(!isNaN(savedTime) ? savedTime : 30 * 60);\r\n    } else {\r\n      fetchQuestions();\r\n    }\r\n  }, [token]);\r\n\r\n  const fetchQuestions = async () => {\r\n    try {\r\n      const res = await getQuestions(token);\r\n      setQuestions(res.data);\r\n      setAnswers(Array(res.data.length).fill(null));\r\n      localStorage.setItem(\"exam_questions\", JSON.stringify(res.data));\r\n      localStorage.setItem(\"exam_answers\", JSON.stringify(Array(res.data.length).fill(null)));\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch questions:\", err);\r\n    }\r\n  };\r\n\r\n  // Timer\r\n  useEffect(() => {\r\n    if (!questions.length || submitted) return;\r\n    if (timeLeft <= 0) {\r\n      handleSubmit();\r\n      return;\r\n    }\r\n    const timer = setTimeout(() => setTimeLeft((prev) => prev - 1), 1000);\r\n    return () => clearTimeout(timer);\r\n  }, [timeLeft, questions.length, submitted]);\r\n\r\n  // Save state on changes\r\n  useEffect(() => {\r\n    localStorage.setItem(\"exam_current\", current);\r\n    localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n    localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n  }, [current, answers, timeLeft]);\r\n\r\n  const handleOption = (idx) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[current] = idx;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (submitted) return;\r\n    const payload = questions.map((q, i) => ({\r\n      questionId: q._id,\r\n      selectedOption: answers[i],\r\n    }));\r\n\r\n    try {\r\n      await submitExam(payload, token);\r\n      setSubmitted(true);\r\n\r\n      // Clear localStorage\r\n      localStorage.removeItem(\"exam_questions\");\r\n      localStorage.removeItem(\"exam_answers\");\r\n      localStorage.removeItem(\"exam_current\");\r\n      localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n      const r = await getResult(token);\r\n      setResult(r.data);\r\n      window.location.href = \"/#/results\";\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.message || \"Error submitting exam\");\r\n    }\r\n  };\r\n\r\n  if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\r\n\r\n  if (submitted && result)\r\n    return (\r\n      <div className=\"exam-container\">\r\n        <h2>Exam Submitted</h2>\r\n        <div>\r\n          Score: {result.score} / {result.review?.length || 0}\r\n        </div>\r\n        <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\r\n      </div>\r\n    );\r\n\r\n  const q = questions[current];\r\n  const minutes = Math.floor(timeLeft / 60);\r\n  const seconds = timeLeft % 60;\r\n\r\n  return (\r\n    <div className=\"exam-container\">\r\n      <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\r\n        Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\r\n      </div>\r\n      <h3>\r\n        Question {current + 1} of {questions.length}\r\n      </h3>\r\n      <div>{q.question}</div>\r\n      <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n        {q.options.map((opt, idx) => (\r\n          <li\r\n            key={idx}\r\n            onClick={() => handleOption(idx)}\r\n            style={{\r\n              padding: \"8px\",\r\n              margin: \"6px 0\",\r\n              border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\r\n              borderRadius: 6,\r\n              backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          >\r\n            {String.fromCharCode(65 + idx)}. {opt}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\r\n        <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>Previous</button>\r\n        <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>Next</button>\r\n        <button onClick={handleSubmit}>Submit Exam</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Exam;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}