{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./Exam.css\";\n// // Before: import { getQuestions, submitExam, getResult } from \"./api\";\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n//   // Fetch questions from backend\n//   useEffect(() => {\n//     if (!token) return;\n\n//     axios\n//       .get(\"http://localhost:5000/api/exam/questions\", {\n//         headers: { Authorization: `Bearer ${token}` },\n//       })\n//       .then((res) => {\n//         setQuestions(res.data);\n//         setAnswers(Array(res.data.length).fill(null));\n//       })\n//       .catch((err) => console.error(\"Failed to fetch questions:\", err));\n//   }, [token]);\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft, questions.length, submitted]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = () => {\n//   if (submitted) return;\n\n//   const payload = questions.map((q, i) => ({\n//     questionId: q._id,\n//     selectedOption: answers[i],\n//   }));\n\n//   submitExam(payload, token)\n//     .then((res) => {\n//       setSubmitted(true);\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       // Fetch result immediately\n//       getResult(token)\n//         .then((r) => {\n//           setResult(r.data);\n//           window.location.hash = \"#/results\";\n//         })\n//         .catch((err) => console.error(err));\n//     })\n//     .catch((err) => {\n//       console.error(err);\n//       alert(err.response?.data?.message || \"Error submitting exam\");\n//     });\n// };\n\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\n\n//   if (submitted && result)\n//     return (\n//       <div className=\"exam-container\">\n//         <h2>Exam Submitted</h2>\n//         <div>\n//           Score: {result.score} / {result.answers.length}\n//         </div>\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>\n//           Return to Dashboard\n//         </button>\n//       </div>\n//     );\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\n//       </div>\n//       <h3>\n//         Question {current + 1} of {questions.length}\n//       </h3>\n//       <div>{q.question}</div>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             onClick={() => handleOption(idx)}\n//             style={{\n//               padding: \"8px\",\n//               margin: \"6px 0\",\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             {String.fromCharCode(65 + idx)}. {opt}\n//           </li>\n//         ))}\n//       </ul>\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>\n//           Previous\n//         </button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>\n//           Next\n//         </button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;\n\n// import React, { useState, useEffect } from \"react\";\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\n\n// function Exam({ token }) {\n//   const [questions, setQuestions] = useState([]);\n//   const [answers, setAnswers] = useState([]);\n//   const [current, setCurrent] = useState(0);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [result, setResult] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\n\n//   // Load state from localStorage\n//   useEffect(() => {\n//     const savedQuestions = JSON.parse(localStorage.getItem(\"exam_questions\"));\n//     const savedAnswers = JSON.parse(localStorage.getItem(\"exam_answers\"));\n//     const savedCurrent = parseInt(localStorage.getItem(\"exam_current\"));\n//     const savedTime = parseInt(localStorage.getItem(\"exam_timeLeft\"));\n\n//     if (savedQuestions?.length) {\n//       setQuestions(savedQuestions);\n//       setAnswers(savedAnswers || Array(savedQuestions.length).fill(null));\n//       setCurrent(!isNaN(savedCurrent) ? savedCurrent : 0);\n//       setTimeLeft(!isNaN(savedTime) ? savedTime : 30 * 60);\n//     } else {\n//       // Fetch from backend\n//       fetchQuestions();\n//     }\n//   }, [token]);\n\n//   const fetchQuestions = async () => {\n//     try {\n//       const res = await getQuestions(token);\n//       setQuestions(res.data);\n//       setAnswers(Array(res.data.length).fill(null));\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(res.data));\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(Array(res.data.length).fill(null)));\n//     } catch (err) {\n//       console.error(\"Failed to fetch questions:\", err);\n//     }\n//   };\n\n//   // Timer\n//   useEffect(() => {\n//     if (!questions.length || submitted) return;\n//     if (timeLeft <= 0) {\n//       handleSubmit();\n//       return;\n//     }\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n//     return () => clearTimeout(timer);\n//   }, [timeLeft, questions.length, submitted]);\n\n//   // Save state on changes\n//   useEffect(() => {\n//     localStorage.setItem(\"exam_current\", current);\n//     localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\n//     localStorage.setItem(\"exam_timeLeft\", timeLeft);\n//   }, [current, answers, timeLeft]);\n\n//   const handleOption = (idx) => {\n//     const newAnswers = [...answers];\n//     newAnswers[current] = idx;\n//     setAnswers(newAnswers);\n//   };\n\n//   const handleSubmit = async () => {\n//     if (submitted) return;\n//     const payload = questions.map((q, i) => ({\n//       questionId: q._id,\n//       selectedOption: answers[i],\n//     }));\n\n//     try {\n//       await submitExam(payload, token);\n//       setSubmitted(true);\n\n//       // Clear localStorage\n//       localStorage.removeItem(\"exam_questions\");\n//       localStorage.removeItem(\"exam_answers\");\n//       localStorage.removeItem(\"exam_current\");\n//       localStorage.removeItem(\"exam_timeLeft\");\n\n//       const r = await getResult(token);\n//       setResult(r.data);\n//       window.location.hash = \"#/results\";\n//     } catch (err) {\n//       console.error(err);\n//       alert(err.response?.data?.message || \"Error submitting exam\");\n//     }\n//   };\n\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\n\n//   if (submitted && result)\n//     return (\n//       <div className=\"exam-container\">\n//         <h2>Exam Submitted</h2>\n//         <div>\n//           Score: {result.score} / {result.answers.length}\n//         </div>\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\n//       </div>\n//     );\n\n//   const q = questions[current];\n//   const minutes = Math.floor(timeLeft / 60);\n//   const seconds = timeLeft % 60;\n\n//   return (\n//     <div className=\"exam-container\">\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\n//       </div>\n//       <h3>\n//         Question {current + 1} of {questions.length}\n//       </h3>\n//       <div>{q.question}</div>\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\n//         {q.options.map((opt, idx) => (\n//           <li\n//             key={idx}\n//             onClick={() => handleOption(idx)}\n//             style={{\n//               padding: \"8px\",\n//               margin: \"6px 0\",\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\n//               borderRadius: 6,\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             {String.fromCharCode(65 + idx)}. {opt}\n//           </li>\n//         ))}\n//       </ul>\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>Previous</button>\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>Next</button>\n//         <button onClick={handleSubmit}>Submit Exam</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Exam;","map":{"version":3,"names":[],"sources":["C:/Users/Sridh/Desktop/new-exam-builder-ace-main/frontend/src/Exam.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./Exam.css\";\r\n// // Before: import { getQuestions, submitExam, getResult } from \"./api\";\r\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n//   // Fetch questions from backend\r\n//   useEffect(() => {\r\n//     if (!token) return;\r\n\r\n//     axios\r\n//       .get(\"http://localhost:5000/api/exam/questions\", {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       })\r\n//       .then((res) => {\r\n//         setQuestions(res.data);\r\n//         setAnswers(Array(res.data.length).fill(null));\r\n//       })\r\n//       .catch((err) => console.error(\"Failed to fetch questions:\", err));\r\n//   }, [token]);\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft, questions.length, submitted]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = () => {\r\n//   if (submitted) return;\r\n\r\n//   const payload = questions.map((q, i) => ({\r\n//     questionId: q._id,\r\n//     selectedOption: answers[i],\r\n//   }));\r\n\r\n//   submitExam(payload, token)\r\n//     .then((res) => {\r\n//       setSubmitted(true);\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       // Fetch result immediately\r\n//       getResult(token)\r\n//         .then((r) => {\r\n//           setResult(r.data);\r\n//           window.location.hash = \"#/results\";\r\n//         })\r\n//         .catch((err) => console.error(err));\r\n//     })\r\n//     .catch((err) => {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.message || \"Error submitting exam\");\r\n//     });\r\n// };\r\n\r\n\r\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\r\n\r\n//   if (submitted && result)\r\n//     return (\r\n//       <div className=\"exam-container\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div>\r\n//           Score: {result.score} / {result.answers.length}\r\n//         </div>\r\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>\r\n//           Return to Dashboard\r\n//         </button>\r\n//       </div>\r\n//     );\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\r\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\r\n//       </div>\r\n//       <h3>\r\n//         Question {current + 1} of {questions.length}\r\n//       </h3>\r\n//       <div>{q.question}</div>\r\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             onClick={() => handleOption(idx)}\r\n//             style={{\r\n//               padding: \"8px\",\r\n//               margin: \"6px 0\",\r\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             {String.fromCharCode(65 + idx)}. {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>\r\n//           Previous\r\n//         </button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>\r\n//           Next\r\n//         </button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { getQuestions, submitExam, getResult } from \"./api.js\";\r\n\r\n// function Exam({ token }) {\r\n//   const [questions, setQuestions] = useState([]);\r\n//   const [answers, setAnswers] = useState([]);\r\n//   const [current, setCurrent] = useState(0);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [result, setResult] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(30 * 60);\r\n\r\n//   // Load state from localStorage\r\n//   useEffect(() => {\r\n//     const savedQuestions = JSON.parse(localStorage.getItem(\"exam_questions\"));\r\n//     const savedAnswers = JSON.parse(localStorage.getItem(\"exam_answers\"));\r\n//     const savedCurrent = parseInt(localStorage.getItem(\"exam_current\"));\r\n//     const savedTime = parseInt(localStorage.getItem(\"exam_timeLeft\"));\r\n\r\n//     if (savedQuestions?.length) {\r\n//       setQuestions(savedQuestions);\r\n//       setAnswers(savedAnswers || Array(savedQuestions.length).fill(null));\r\n//       setCurrent(!isNaN(savedCurrent) ? savedCurrent : 0);\r\n//       setTimeLeft(!isNaN(savedTime) ? savedTime : 30 * 60);\r\n//     } else {\r\n//       // Fetch from backend\r\n//       fetchQuestions();\r\n//     }\r\n//   }, [token]);\r\n\r\n//   const fetchQuestions = async () => {\r\n//     try {\r\n//       const res = await getQuestions(token);\r\n//       setQuestions(res.data);\r\n//       setAnswers(Array(res.data.length).fill(null));\r\n//       localStorage.setItem(\"exam_questions\", JSON.stringify(res.data));\r\n//       localStorage.setItem(\"exam_answers\", JSON.stringify(Array(res.data.length).fill(null)));\r\n//     } catch (err) {\r\n//       console.error(\"Failed to fetch questions:\", err);\r\n//     }\r\n//   };\r\n\r\n//   // Timer\r\n//   useEffect(() => {\r\n//     if (!questions.length || submitted) return;\r\n//     if (timeLeft <= 0) {\r\n//       handleSubmit();\r\n//       return;\r\n//     }\r\n//     const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n//     return () => clearTimeout(timer);\r\n//   }, [timeLeft, questions.length, submitted]);\r\n\r\n//   // Save state on changes\r\n//   useEffect(() => {\r\n//     localStorage.setItem(\"exam_current\", current);\r\n//     localStorage.setItem(\"exam_answers\", JSON.stringify(answers));\r\n//     localStorage.setItem(\"exam_timeLeft\", timeLeft);\r\n//   }, [current, answers, timeLeft]);\r\n\r\n//   const handleOption = (idx) => {\r\n//     const newAnswers = [...answers];\r\n//     newAnswers[current] = idx;\r\n//     setAnswers(newAnswers);\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (submitted) return;\r\n//     const payload = questions.map((q, i) => ({\r\n//       questionId: q._id,\r\n//       selectedOption: answers[i],\r\n//     }));\r\n\r\n//     try {\r\n//       await submitExam(payload, token);\r\n//       setSubmitted(true);\r\n\r\n//       // Clear localStorage\r\n//       localStorage.removeItem(\"exam_questions\");\r\n//       localStorage.removeItem(\"exam_answers\");\r\n//       localStorage.removeItem(\"exam_current\");\r\n//       localStorage.removeItem(\"exam_timeLeft\");\r\n\r\n//       const r = await getResult(token);\r\n//       setResult(r.data);\r\n//       window.location.hash = \"#/results\";\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       alert(err.response?.data?.message || \"Error submitting exam\");\r\n//     }\r\n//   };\r\n\r\n//   if (!questions.length) return <div className=\"exam-container\">Loading questions...</div>;\r\n\r\n//   if (submitted && result)\r\n//     return (\r\n//       <div className=\"exam-container\">\r\n//         <h2>Exam Submitted</h2>\r\n//         <div>\r\n//           Score: {result.score} / {result.answers.length}\r\n//         </div>\r\n//         <button onClick={() => (window.location.hash = \"#/dashboard\")}>Return to Dashboard</button>\r\n//       </div>\r\n//     );\r\n\r\n//   const q = questions[current];\r\n//   const minutes = Math.floor(timeLeft / 60);\r\n//   const seconds = timeLeft % 60;\r\n\r\n//   return (\r\n//     <div className=\"exam-container\">\r\n//       <div style={{ textAlign: \"right\", color: \"#d32f2f\", fontWeight: 600 }}>\r\n//         Time Left: {minutes.toString().padStart(2, \"0\")}:{seconds.toString().padStart(2, \"0\")}\r\n//       </div>\r\n//       <h3>\r\n//         Question {current + 1} of {questions.length}\r\n//       </h3>\r\n//       <div>{q.question}</div>\r\n//       <ul style={{ listStyle: \"none\", padding: 0 }}>\r\n//         {q.options.map((opt, idx) => (\r\n//           <li\r\n//             key={idx}\r\n//             onClick={() => handleOption(idx)}\r\n//             style={{\r\n//               padding: \"8px\",\r\n//               margin: \"6px 0\",\r\n//               border: answers[current] === idx ? \"2px solid #1976d2\" : \"2px solid #ccc\",\r\n//               borderRadius: 6,\r\n//               backgroundColor: answers[current] === idx ? \"#e3f2fd\" : \"#fff\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             {String.fromCharCode(65 + idx)}. {opt}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//       <div style={{ display: \"flex\", gap: \"12px\", marginTop: \"16px\" }}>\r\n//         <button disabled={current === 0} onClick={() => setCurrent(current - 1)}>Previous</button>\r\n//         <button disabled={current === questions.length - 1} onClick={() => setCurrent(current + 1)}>Next</button>\r\n//         <button onClick={handleSubmit}>Submit Exam</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Exam;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}